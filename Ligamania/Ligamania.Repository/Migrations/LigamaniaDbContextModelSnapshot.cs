// <auto-generated />
using System;
using Ligamania.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ligamania.Repository.Migrations
{
    [DbContext(typeof(LigamaniaDbContext))]
    partial class LigamaniaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ligamania.Repository.LigamaniaApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompartirGrupo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conocimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Equipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEntrenador")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLogout")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserState")
                        .HasColumnType("int");

                    b.Property<bool>("Whatsap")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionCambioDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Categoria_ID")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int?>("ClubCambioId")
                        .HasColumnType("int");

                    b.Property<int?>("ClubCambio_ID")
                        .HasColumnType("int");

                    b.Property<int>("Club_ID")
                        .HasColumnType("int")
                        .HasColumnName("Club_ID");

                    b.Property<int>("Competicion_ID")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Equipo_ID")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_ID");

                    b.Property<int?>("JugadorCambioId")
                        .HasColumnType("int");

                    b.Property<int?>("JugadorCambio_ID")
                        .HasColumnType("int");

                    b.Property<int>("Jugador_ID")
                        .HasColumnType("int")
                        .HasColumnName("Jugador_ID");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Puesto_ID")
                        .HasColumnType("int")
                        .HasColumnName("Puesto_ID");

                    b.Property<int>("Temporada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Categoria_ID");

                    b.HasIndex("ClubCambioId");

                    b.HasIndex("Club_ID");

                    b.HasIndex("Competicion_ID");

                    b.HasIndex("Equipo_ID");

                    b.HasIndex("JugadorCambioId");

                    b.HasIndex("Jugador_ID");

                    b.HasIndex("Puesto_ID");

                    b.HasIndex("Temporada_ID", "Competicion_ID", "Categoria_ID", "Equipo_ID")
                        .HasDatabaseName("IX_AlineacionCambio_2");

                    b.HasIndex("Temporada_ID", "Competicion_ID", "Categoria_ID", "Equipo_ID", "Jugador_ID")
                        .IsUnique()
                        .HasDatabaseName("IX_AlineacionCambio");

                    b.ToTable("Alineacion_Cambio", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Categoria_ID")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int>("Club_ID")
                        .HasColumnType("int")
                        .HasColumnName("Club_ID");

                    b.Property<int>("Competicion_ID")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Equipo_ID")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_ID");

                    b.Property<int>("Jornada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Jornada_ID");

                    b.Property<int>("Jugador_ID")
                        .HasColumnType("int")
                        .HasColumnName("Jugador_ID");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Puesto_ID")
                        .HasColumnType("int")
                        .HasColumnName("Puesto_ID");

                    b.Property<int>("Temporada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Categoria_ID");

                    b.HasIndex("Club_ID");

                    b.HasIndex("Competicion_ID");

                    b.HasIndex("Equipo_ID")
                        .HasDatabaseName("IX_Alineacion_2");

                    b.HasIndex("Jornada_ID");

                    b.HasIndex("Jugador_ID");

                    b.HasIndex("Puesto_ID");

                    b.HasIndex("Temporada_ID", "Competicion_ID", "Categoria_ID", "Jornada_ID")
                        .HasDatabaseName("IX_Alineacion_3");

                    b.HasIndex("Temporada_ID", "Competicion_ID", "Categoria_ID", "Equipo_ID", "Jornada_ID", "Jugador_ID")
                        .IsUnique()
                        .HasDatabaseName("IX_Alineacion");

                    b.ToTable("Alineacion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionHistoricoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Categoria_ID")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int>("Club_ID")
                        .HasColumnType("int")
                        .HasColumnName("Club_ID");

                    b.Property<int>("Competicion_ID")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Equipo_ID")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_ID");

                    b.Property<int>("Jornada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Jornada_ID");

                    b.Property<int>("Jugador_ID")
                        .HasColumnType("int")
                        .HasColumnName("Jugador_ID");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Puesto_ID")
                        .HasColumnType("int")
                        .HasColumnName("Puesto_ID");

                    b.Property<int>("Temporada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Categoria_ID");

                    b.HasIndex("Club_ID");

                    b.HasIndex("Competicion_ID");

                    b.HasIndex("Equipo_ID")
                        .HasDatabaseName("IX_HistoricoAlineacion_2");

                    b.HasIndex("Jornada_ID");

                    b.HasIndex("Jugador_ID");

                    b.HasIndex("Puesto_ID");

                    b.HasIndex("Temporada_ID", "Competicion_ID", "Categoria_ID", "Jornada_ID")
                        .HasDatabaseName("IX_HistoricoAlineacion_3");

                    b.HasIndex("Temporada_ID", "Competicion_ID", "Categoria_ID", "Equipo_ID", "Jornada_ID", "Jugador_ID")
                        .IsUnique()
                        .HasDatabaseName("IX_HistoricoAlineacion");

                    b.ToTable("HistoricoAlineacion", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionPreviaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Categoria_ID")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int>("Club_ID")
                        .HasColumnType("int")
                        .HasColumnName("Club_ID");

                    b.Property<int>("Competicion_ID")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Equipo_ID")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_ID");

                    b.Property<int>("Jugador_ID")
                        .HasColumnType("int")
                        .HasColumnName("Jugador_ID");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Puesto_ID")
                        .HasColumnType("int")
                        .HasColumnName("Puesto_ID");

                    b.Property<int>("Temporada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Categoria_ID");

                    b.HasIndex("Club_ID");

                    b.HasIndex("Competicion_ID");

                    b.HasIndex("Equipo_ID");

                    b.HasIndex("Jugador_ID");

                    b.HasIndex("Puesto_ID");

                    b.HasIndex("Temporada_ID", "Competicion_ID", "Categoria_ID", "Equipo_ID", "Jugador_ID")
                        .IsUnique()
                        .HasDatabaseName("IX_AlineacionPrevia");

                    b.ToTable("Alineacion_Previa", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CalendarioDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumEquipos")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CalendarioDetalleDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Calendario_ID")
                        .HasColumnType("int")
                        .HasColumnName("Calendario_Id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Jornada")
                        .HasColumnType("int");

                    b.Property<string>("Local")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Visitante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Calendario_ID");

                    b.ToTable("CalendarioDetalle");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CambiosEquipoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EquipoDestino_ID")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_Destino_Id");

                    b.Property<int?>("EquipoOrigen_ID")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_Origen_Id");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Temporada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_Id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EquipoDestino_ID");

                    b.HasIndex("EquipoOrigen_ID");

                    b.HasIndex("Temporada_ID");

                    b.ToTable("CambiosEquipo", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CategoriaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Activa")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_Categoria")
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.ClubDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Baja")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Club");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CompeticionCategoriaDTO", b =>
                {
                    b.Property<int>("Categoria_Id")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_Id");

                    b.Property<int>("Competicion_Id")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_Id");

                    b.HasKey("Categoria_Id", "Competicion_Id");

                    b.HasIndex("Competicion_Id");

                    b.ToTable("CompeticionCategoria");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CompeticionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompeticionCopiarAliIni")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("Competicion_CopiarAliIni");

                    b.Property<bool>("CopiarAlineacionInicial")
                        .HasColumnType("bit")
                        .HasColumnName("Copiar_AlineacionInicial");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("JornadaCuadro")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<bool>("RepetirClubAliIni")
                        .HasColumnType("bit");

                    b.Property<int?>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_Competicion")
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Competicion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.ControlUsuarioDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Equipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Usuario")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.HasKey("Id");

                    b.ToTable("ControlUsuario");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CuadroCopaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaEquipoAId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaEquipoBId")
                        .HasColumnType("int");

                    b.Property<int>("CompeticionEquipoAId")
                        .HasColumnType("int");

                    b.Property<int>("CompeticionEquipoBId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumPartido")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("PuestoPartidoEquipoA")
                        .HasColumnType("int");

                    b.Property<int>("PuestoPartidoEquipoB")
                        .HasColumnType("int");

                    b.Property<int>("Ronda")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompeticionEquipoAId", "CategoriaEquipoAId");

                    b.HasIndex("CompeticionEquipoBId", "CategoriaEquipoBId");

                    b.HasIndex("Ronda", "NumPartido")
                        .IsUnique()
                        .HasDatabaseName("IX_CuadroCopa");

                    b.ToTable("CuadroCopa");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.DocumentsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_Documents")
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.EquipoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Baja")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Entrenador_Id")
                        .HasColumnType("int")
                        .HasColumnName("Entrenador_Id");

                    b.Property<bool>("EsBot")
                        .HasColumnType("bit")
                        .HasColumnName("EsBOT");

                    b.Property<byte[]>("EscudoImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_Equipo")
                        .HasFilter("[Nombre] IS NOT NULL");

                    b.ToTable("Equipo");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.EstadoCompeticionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EstadoCompeticion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.HistoricoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Categoria_ID")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Equipo_ID")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_ID");

                    b.Property<bool>("Pichichi")
                        .HasColumnType("bit");

                    b.Property<int>("Puesto")
                        .HasColumnType("int");

                    b.Property<int>("Temporada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Categoria_ID");

                    b.HasIndex("Equipo_ID");

                    b.HasIndex("Temporada_ID", "Equipo_ID", "Categoria_ID", "Puesto")
                        .IsUnique()
                        .HasDatabaseName("IX_Historico");

                    b.ToTable("Historico");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.JugadorDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Baja")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Jugador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.NoticiaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Texto")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Noticia");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.OperacionCompeticionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("OperacionCompeticion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.PuestoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Puesto");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.PuntuacionHistoricaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Campeon")
                        .HasColumnType("int");

                    b.Property<int?>("Categoria_Id")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_Id");

                    b.Property<int?>("Competicion_Id")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_Id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pichichi")
                        .HasColumnType("int");

                    b.Property<int>("Subcampeon")
                        .HasColumnType("int");

                    b.Property<int>("Tercero")
                        .HasColumnType("int");

                    b.Property<int>("Todos")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Categoria_Id");

                    b.HasIndex("Competicion_Id");

                    b.ToTable("PuntuacionHistorica");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.SettingsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ClasificacionRotuloCopa")
                        .HasColumnType("bit")
                        .HasColumnName("Clasificacion_RotuloCopa");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NotificacionClasificaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroJornadasVolverEliminados")
                        .HasColumnType("int");

                    b.Property<string>("TemporadaPremios")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("VerCuadroCopa")
                        .HasColumnType("bit")
                        .HasColumnName("Ver_CuadroCopa");

                    b.Property<bool?>("VerEquiposPretemporada")
                        .HasColumnType("bit")
                        .HasColumnName("Ver_EquiposPretemporada");

                    b.Property<bool?>("VerNoticias")
                        .HasColumnType("bit")
                        .HasColumnName("Ver_Noticias");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaClasificacionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Diferencia")
                        .HasColumnType("int");

                    b.Property<int>("Empatados")
                        .HasColumnType("int");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_ID");

                    b.Property<DateTime>("FechaIns")
                        .HasColumnType("datetime");

                    b.Property<int>("Ganados")
                        .HasColumnType("int");

                    b.Property<int>("GolesContra")
                        .HasColumnType("int");

                    b.Property<int>("GolesFavor")
                        .HasColumnType("int");

                    b.Property<int>("JornadaId")
                        .HasColumnType("int")
                        .HasColumnName("Jornada_ID");

                    b.Property<int>("Jugados")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Perdidos")
                        .HasColumnType("int");

                    b.Property<int>("Puesto")
                        .HasColumnType("int");

                    b.Property<int>("Puntos")
                        .HasColumnType("int");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("JornadaId");

                    b.HasIndex("TemporadaId");

                    b.ToTable("TemporadaClasificacion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaClubJugadorDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<int>("JugadorId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("JugadorId");

                    b.HasIndex("TemporadaId");

                    b.ToTable("TemporadaClubJugadorDTO");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("MarcarPichichi")
                        .HasColumnType("bit");

                    b.Property<int>("NumeroMaximoJugadorEliminar")
                        .HasColumnType("int")
                        .HasColumnName("NumeroMaximoJugador_Eliminar");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("TemporadaId", "CompeticionId", "CategoriaId")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaCompeticionCategoria");

                    b.ToTable("TemporadaCompeticionCategoria");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionCategoriaReferenciaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Argb")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int?>("CompeticionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<bool>("EsPremio")
                        .HasColumnType("bit");

                    b.Property<string>("Marca")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PosicionFinal")
                        .HasColumnType("int")
                        .HasColumnName("Posicion_Final");

                    b.Property<int>("PosicionInicial")
                        .HasColumnType("int")
                        .HasColumnName("Posicion_Inicial");

                    b.Property<int?>("TemporadaCompeticionCategoriaId")
                        .HasColumnType("int");

                    b.Property<int?>("TemporadaDTOId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("UsarColor")
                        .HasColumnType("bit");

                    b.Property<bool>("UsarMarca")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("TemporadaCompeticionCategoriaId");

                    b.HasIndex("TemporadaDTOId");

                    b.ToTable("TemporadaCompeticionCategoriaReferencia", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<int>("CambiosFijos")
                        .HasColumnType("int");

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DescripcionEstado")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<int?>("EstadoActualId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoActual_Id");

                    b.Property<int?>("OperacionActualId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionActual_Id");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("EstadoActualId");

                    b.HasIndex("OperacionActualId");

                    b.HasIndex("TemporadaId", "CompeticionId")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaCompeticion");

                    b.ToTable("TemporadaCompeticion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actual")
                        .HasColumnType("bit");

                    b.Property<bool>("AlineacionLibre")
                        .HasColumnType("bit");

                    b.Property<bool>("Carrusel")
                        .HasColumnType("bit");

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroJornada")
                        .HasColumnType("int")
                        .HasColumnName("Numero_Jornada");

                    b.Property<int>("RondaId")
                        .HasColumnType("int");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("RondaId");

                    b.HasIndex("TemporadaId", "CompeticionId", "NumeroJornada")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaCompeticionJornada");

                    b.ToTable("TemporadaCompeticionJornada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionOperacionDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_Id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EstadoCompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoCompeticion_Id");

                    b.Property<int?>("EstadoSiguienteId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoSiguiente_Id");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperacionCompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionCompeticion_Id");

                    b.Property<int?>("OperacionSiguienteId")
                        .HasColumnType("int")
                        .HasColumnName("OperacionSiguiente_Id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("EstadoCompeticionId");

                    b.HasIndex("EstadoSiguienteId");

                    b.HasIndex("OperacionCompeticionId");

                    b.HasIndex("OperacionSiguienteId");

                    b.ToTable("TemporadaCompeticionOperacion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaContabilidadDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Concepto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Equipo")
                        .HasColumnType("bit");

                    b.Property<bool>("Gasto")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TemporadaId");

                    b.ToTable("TemporadaContabilidad");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCuadroDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Criterio")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("EquipoACategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("EquipoA_Categoria_ID");

                    b.Property<int>("EquipoACompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("EquipoA_Competicion_ID");

                    b.Property<int>("EquipoAPuesto")
                        .HasColumnType("int")
                        .HasColumnName("EquipoA_Puesto");

                    b.Property<int>("EquipoBCategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("EquipoB_Categoria_ID");

                    b.Property<int>("EquipoBCompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("EquipoB_Competicion_ID");

                    b.Property<int>("EquipoBPuesto")
                        .HasColumnType("int")
                        .HasColumnName("EquipoB_Puesto");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEquipoA")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("Nombre_EquipoA");

                    b.Property<string>("NombreEquipoB")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("Nombre_EquipoB");

                    b.Property<string>("NombreGanador")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)")
                        .HasColumnName("Nombre_Ganador");

                    b.Property<int?>("NumeroPartido")
                        .HasColumnType("int")
                        .HasColumnName("Numero_Partido");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("Ronda")
                        .HasColumnType("int");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("EquipoACategoriaId");

                    b.HasIndex("EquipoACompeticionId");

                    b.HasIndex("EquipoBCategoriaId");

                    b.HasIndex("EquipoBCompeticionId");

                    b.HasIndex("TemporadaId");

                    b.ToTable("TemporadaCuadroDTO");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actual")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Historificada")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Img_Clasificacion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaEquipoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlineacionLibre")
                        .HasColumnType("bit");

                    b.Property<bool>("Baja")
                        .HasColumnType("bit");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<bool>("ConfirmadaTemporada")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Diferencia")
                        .HasColumnType("int");

                    b.Property<int>("EquipoId")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_ID");

                    b.Property<int>("GolesContra")
                        .HasColumnType("int");

                    b.Property<int>("GolesFavor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PagadaTemporada")
                        .HasColumnType("bit");

                    b.Property<int>("PartidosEmpatados")
                        .HasColumnType("int");

                    b.Property<int>("PartidosGanados")
                        .HasColumnType("int");

                    b.Property<int>("PartidosJugados")
                        .HasColumnType("int");

                    b.Property<int>("PartidosPerdidos")
                        .HasColumnType("int");

                    b.Property<int>("Puntos")
                        .HasColumnType("int");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("EquipoId");

                    b.HasIndex("TemporadaId", "CompeticionId", "CategoriaId", "EquipoId")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaEquipo");

                    b.ToTable("TemporadaEquipo");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaJornadaJugadorDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("GolesContra")
                        .HasColumnType("int");

                    b.Property<int>("GolesFavor")
                        .HasColumnType("int");

                    b.Property<int>("JornadaId")
                        .HasColumnType("int")
                        .HasColumnName("Jornada_ID");

                    b.Property<int>("JugadorId")
                        .HasColumnType("int")
                        .HasColumnName("Jugador_ID");

                    b.Property<int?>("MinutosJugados")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreEliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("TarjetasAmarillas")
                        .HasColumnType("int");

                    b.Property<int?>("TarjetasRojas")
                        .HasColumnType("int");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("JornadaId");

                    b.HasIndex("JugadorId");

                    b.HasIndex("TemporadaId", "JornadaId", "JugadorId")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaJornadaJugador");

                    b.ToTable("TemporadaJornadaJugador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaJugadorDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("Jugador_ID")
                        .HasColumnType("int")
                        .HasColumnName("Jugador_ID");

                    b.Property<int?>("LastJornadaEliminacionId")
                        .HasColumnType("int");

                    b.Property<bool>("PreEliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("PuestoId")
                        .HasColumnType("int");

                    b.Property<int>("Temporada_ID")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VecesEliminado")
                        .HasColumnType("int");

                    b.Property<int>("VecesPreEliminado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("Jugador_ID");

                    b.HasIndex("LastJornadaEliminacionId");

                    b.HasIndex("PuestoId");

                    b.HasIndex("Temporada_ID", "Jugador_ID")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaJugador");

                    b.ToTable("TemporadaJugador", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaJugadorObsolete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("JugadorId")
                        .HasColumnType("int");

                    b.Property<int>("Jugador_ID")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreEliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("TemporadaId")
                        .HasColumnType("int");

                    b.Property<int>("Temporada_ID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VecesEliminado")
                        .HasColumnType("int");

                    b.Property<int>("VecesPreEliminado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JugadorId");

                    b.HasIndex("TemporadaId");

                    b.ToTable("oldTemporadaJugador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPartidoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<int>("CompeticionId")
                        .HasColumnType("int")
                        .HasColumnName("Competicion_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EquipoAId")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_A_Id");

                    b.Property<int?>("EquipoBId")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_B_Id");

                    b.Property<int?>("EquipoGanadorId")
                        .HasColumnType("int")
                        .HasColumnName("Equipo_Ganador_Id");

                    b.Property<int>("JornadaId")
                        .HasColumnType("int")
                        .HasColumnName("Jornada_ID");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroPartido")
                        .HasColumnType("int")
                        .HasColumnName("Numero_Partido");

                    b.Property<int>("ResultadoA")
                        .HasColumnType("int")
                        .HasColumnName("Resultado_A");

                    b.Property<int>("ResultadoB")
                        .HasColumnType("int")
                        .HasColumnName("Resultado_B");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int")
                        .HasColumnName("Temporada_ID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CompeticionId");

                    b.HasIndex("EquipoAId");

                    b.HasIndex("EquipoBId");

                    b.HasIndex("EquipoGanadorId");

                    b.HasIndex("JornadaId");

                    b.HasIndex("TemporadaId", "CompeticionId", "CategoriaId", "JornadaId", "EquipoAId", "EquipoBId")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaPartido_2")
                        .HasFilter("[Equipo_A_Id] IS NOT NULL AND [Equipo_B_Id] IS NOT NULL");

                    b.ToTable("TemporadaPartido");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPremiosDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("Categoria_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Porcentaje")
                        .HasColumnType("float");

                    b.Property<double>("PorcentajeAjustado")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("TemporadaPremios");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPremiosPuestoDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Importe")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Porcentaje")
                        .HasColumnType("float");

                    b.Property<double>("PorcentajeAjustado")
                        .HasColumnType("float");

                    b.Property<int>("PremioCategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("PremioCategoria_ID");

                    b.Property<int>("Puesto")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PremioCategoriaId");

                    b.ToTable("TemporadaPremiosPuesto", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPuestoJugadorDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<int>("JugadorId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PuestoId")
                        .HasColumnType("int");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JugadorId");

                    b.HasIndex("PuestoId");

                    b.HasIndex("TemporadaId");

                    b.ToTable("TemporadaPuestoJugadorDTO");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaRondaDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<int>("CompeticionID")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("GenerarJornadaFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("JornadaIdaActiva")
                        .HasColumnType("bit");

                    b.Property<int>("JornadaIdaID")
                        .HasColumnType("int");

                    b.Property<int?>("JornadaVueltaID")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumRonda")
                        .HasColumnType("int");

                    b.Property<bool>("RondaFinal")
                        .HasColumnType("bit");

                    b.Property<int>("TemporadaID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompeticionID");

                    b.HasIndex("JornadaIdaID");

                    b.HasIndex("JornadaVueltaID");

                    b.HasIndex("TemporadaID", "CompeticionID", "NumRonda")
                        .IsUnique()
                        .HasDatabaseName("IX_TemporadaRonda");

                    b.ToTable("TemporadaRonda", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionCambioDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("AlineacionCambio")
                        .HasForeignKey("Categoria_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Cambio_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.ClubDTO", "ClubCambio")
                        .WithMany("AlineacionCambioClubCambio")
                        .HasForeignKey("ClubCambioId");

                    b.HasOne("Ligamania.Repository.Models.ClubDTO", "Club")
                        .WithMany("AlineacionCambioClub")
                        .HasForeignKey("Club_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Cambio_dbo.Club_Club_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("AlineacionCambio")
                        .HasForeignKey("Competicion_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Cambio_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaEquipoDTO", "Equipo")
                        .WithMany("AlineacionCambio")
                        .HasForeignKey("Equipo_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Cambio_dbo.TemporadaEquipo_Equipo_ID");

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "JugadorCambio")
                        .WithMany("AlineacionCambioJugadorCambio")
                        .HasForeignKey("JugadorCambioId");

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("AlineacionCambioJugador")
                        .HasForeignKey("Jugador_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Cambio_dbo.Jugador_Jugador_ID");

                    b.HasOne("Ligamania.Repository.Models.PuestoDTO", "Puesto")
                        .WithMany("AlineacionCambio")
                        .HasForeignKey("Puesto_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Cambio_dbo.Puesto_Puesto_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("AlineacionCambio")
                        .HasForeignKey("Temporada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Cambio_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Club");

                    b.Navigation("ClubCambio");

                    b.Navigation("Competicion");

                    b.Navigation("Equipo");

                    b.Navigation("Jugador");

                    b.Navigation("JugadorCambio");

                    b.Navigation("Puesto");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("Alineacion")
                        .HasForeignKey("Categoria_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.ClubDTO", "Club")
                        .WithMany("Alineacion")
                        .HasForeignKey("Club_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.Club_Club_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("Alineacion")
                        .HasForeignKey("Competicion_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaEquipoDTO", "Equipo")
                        .WithMany("Alineacion")
                        .HasForeignKey("Equipo_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.TemporadaEquipo_Equipo_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "Jornada")
                        .WithMany("Alineacion")
                        .HasForeignKey("Jornada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.TemporadaCompeticionJornada_Jornada_ID");

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("Alineacion")
                        .HasForeignKey("Jugador_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.Jugador_Jugador_ID");

                    b.HasOne("Ligamania.Repository.Models.PuestoDTO", "Puesto")
                        .WithMany("Alineacion")
                        .HasForeignKey("Puesto_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.Puesto_Puesto_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("Alineacion")
                        .HasForeignKey("Temporada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Club");

                    b.Navigation("Competicion");

                    b.Navigation("Equipo");

                    b.Navigation("Jornada");

                    b.Navigation("Jugador");

                    b.Navigation("Puesto");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionHistoricoDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Categoria_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.ClubDTO", "Club")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Club_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.Club_Club_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Competicion_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaEquipoDTO", "Equipo")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Equipo_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.TemporadaEquipo_Equipo_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "Jornada")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Jornada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.TemporadaCompeticionJornada_Jornada_ID");

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Jugador_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.Jugador_Jugador_ID");

                    b.HasOne("Ligamania.Repository.Models.PuestoDTO", "Puesto")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Puesto_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.Puesto_Puesto_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("AlineacionHistorica")
                        .HasForeignKey("Temporada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.HistoricoAlineacion_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Club");

                    b.Navigation("Competicion");

                    b.Navigation("Equipo");

                    b.Navigation("Jornada");

                    b.Navigation("Jugador");

                    b.Navigation("Puesto");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.AlineacionPreviaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("AlineacionPrevia")
                        .HasForeignKey("Categoria_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Previa_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.ClubDTO", "Club")
                        .WithMany("AlineacionPrevia")
                        .HasForeignKey("Club_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Previa_dbo.Club_Club_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("AlineacionPrevia")
                        .HasForeignKey("Competicion_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Previa_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaEquipoDTO", "Equipo")
                        .WithMany("AlineacionPrevia")
                        .HasForeignKey("Equipo_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Previa_dbo.TemporadaEquipo_Equipo_ID");

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("AlineacionPrevia")
                        .HasForeignKey("Jugador_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Previa_dbo.Jugador_Jugador_ID");

                    b.HasOne("Ligamania.Repository.Models.PuestoDTO", "Puesto")
                        .WithMany("AlineacionPrevia")
                        .HasForeignKey("Puesto_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Previa_dbo.Puesto_Puesto_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("AlineacionPrevia")
                        .HasForeignKey("Temporada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Alineacion_Previa_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Club");

                    b.Navigation("Competicion");

                    b.Navigation("Equipo");

                    b.Navigation("Jugador");

                    b.Navigation("Puesto");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CalendarioDetalleDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CalendarioDTO", "Calendario")
                        .WithMany("CalendarioDetalle")
                        .HasForeignKey("Calendario_ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CalendarioDetalle_dbo.Calendario_Calendario_Id");

                    b.Navigation("Calendario");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CambiosEquipoDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.EquipoDTO", "EquipoDestino")
                        .WithMany("CambiosEquipoEquipoDestino")
                        .HasForeignKey("EquipoDestino_ID")
                        .HasConstraintName("FK_dbo.CambiosEquipo_dbo.Equipo_Equipo_Destino_Id");

                    b.HasOne("Ligamania.Repository.Models.EquipoDTO", "EquipoOrigen")
                        .WithMany("CambiosEquipoEquipoOrigen")
                        .HasForeignKey("EquipoOrigen_ID")
                        .HasConstraintName("FK_dbo.CambiosEquipo_dbo.Equipo_Equipo_Origen_Id");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("CambiosEquipo")
                        .HasForeignKey("Temporada_ID")
                        .HasConstraintName("FK_dbo.CambiosEquipo_dbo.Temporada_Temporada_Id");

                    b.Navigation("EquipoDestino");

                    b.Navigation("EquipoOrigen");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CompeticionCategoriaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("CompeticionCategoria")
                        .HasForeignKey("Categoria_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CompeticionCategoria_dbo.Categoria_Categoria_Id");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("CompeticionCategoria")
                        .HasForeignKey("Competicion_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CompeticionCategoria_dbo.Competicion_Competicion_Id");

                    b.Navigation("Categoria");

                    b.Navigation("Competicion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CuadroCopaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CompeticionCategoriaDTO", "CompeticionCategoriaEquipoA")
                        .WithMany("CuadroCopaEquipoA")
                        .HasForeignKey("CompeticionEquipoAId", "CategoriaEquipoAId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CuadoCopa_dbo.CompeticionCategoriaEquipoAId");

                    b.HasOne("Ligamania.Repository.Models.CompeticionCategoriaDTO", "CompeticionCategoriaEquipoB")
                        .WithMany("CuadroCopaEquipoB")
                        .HasForeignKey("CompeticionEquipoBId", "CategoriaEquipoBId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.CuadoCopa_dbo.CompeticionCategoriaEquipoBId");

                    b.Navigation("CompeticionCategoriaEquipoA");

                    b.Navigation("CompeticionCategoriaEquipoB");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.EquipoDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.LigamaniaApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.HistoricoDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", "TemporadaCompeticionCategoria")
                        .WithMany("Historico")
                        .HasForeignKey("Categoria_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Historico_dbo.TemporadaCompeticionCategoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaEquipoDTO", "TemporadaEquipo")
                        .WithMany("Historico")
                        .HasForeignKey("Equipo_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Historico_dbo.TemporadaEquipo_Equipo_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("Historico")
                        .HasForeignKey("Temporada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Historico_dbo.Temporada_Temporada_ID");

                    b.Navigation("Temporada");

                    b.Navigation("TemporadaCompeticionCategoria");

                    b.Navigation("TemporadaEquipo");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.PuntuacionHistoricaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("PuntuacionHistorica")
                        .HasForeignKey("Categoria_Id")
                        .HasConstraintName("FK_dbo.PuntuacionHistorica_dbo.Categoria_Categoria_Id");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("PuntuacionHistorica")
                        .HasForeignKey("Competicion_Id")
                        .HasConstraintName("FK_dbo.PuntuacionHistorica_dbo.Competicion_Competicion_Id");

                    b.Navigation("Categoria");

                    b.Navigation("Competicion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaClasificacionDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("TemporadaClasificacion")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaClasificacion_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("TemporadaClasificacion")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaClasificacion_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.EquipoDTO", "Equipo")
                        .WithMany("TemporadaClasificacion")
                        .HasForeignKey("EquipoId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaClasificacion_dbo.Equipo_Equipo_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "Jornada")
                        .WithMany("TemporadaClasificacion")
                        .HasForeignKey("JornadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaClasificacion_dbo.TemporadaCompeticionJornada_Jornada_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaClasificacion")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaClasificacion_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Competicion");

                    b.Navigation("Equipo");

                    b.Navigation("Jornada");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaClubJugadorDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.ClubDTO", "Club")
                        .WithMany("TemporadaClubJugador")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("TemporadaClubJugador")
                        .HasForeignKey("JugadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaClubJugador")
                        .HasForeignKey("TemporadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Jugador");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("TemporadaCompeticionCategoria")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionCategoria_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("TemporadaCompeticionCategoria")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionCategoria_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaCompeticionCategoria")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionCategoria_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Competicion");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionCategoriaReferenciaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany()
                        .HasForeignKey("CompeticionId");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", "TemporadaCompeticionCategoria")
                        .WithMany("TemporadaCompeticionCategoriaReferencia")
                        .HasForeignKey("TemporadaCompeticionCategoriaId");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", null)
                        .WithMany("TemporadaCompeticionCategoriaReferencia")
                        .HasForeignKey("TemporadaDTOId");

                    b.Navigation("Categoria");

                    b.Navigation("Competicion");

                    b.Navigation("TemporadaCompeticionCategoria");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("TemporadaCompeticion")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticion_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.EstadoCompeticionDTO", "EstadoActual")
                        .WithMany("TemporadaCompeticion")
                        .HasForeignKey("EstadoActualId")
                        .HasConstraintName("FK_dbo.TemporadaCompeticion_dbo.EstadoCompeticion_EstadoActual_Id");

                    b.HasOne("Ligamania.Repository.Models.OperacionCompeticionDTO", "OperacionActual")
                        .WithMany("TemporadaCompeticion")
                        .HasForeignKey("OperacionActualId")
                        .HasConstraintName("FK_dbo.TemporadaCompeticion_dbo.OperacionCompeticion_OperacionActual_Id");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaCompeticion")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticion_dbo.Temporada_Temporada_ID");

                    b.Navigation("Competicion");

                    b.Navigation("EstadoActual");

                    b.Navigation("OperacionActual");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("TemporadaCompeticionJornada")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionJornada_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaRondaDTO", "Ronda")
                        .WithMany("JornadasFinal")
                        .HasForeignKey("RondaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionJornadaIda_dbo.TemporadaRonda_RondaId");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaCompeticionJornada")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionJornada_dbo.Temporada_Temporada_ID");

                    b.Navigation("Competicion");

                    b.Navigation("Ronda");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionOperacionDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionDTO", "Competicion")
                        .WithMany("TemporadaCompeticionOperacion")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionOperacion_dbo.TemporadaCompeticion_Competicion_Id");

                    b.HasOne("Ligamania.Repository.Models.EstadoCompeticionDTO", "EstadoCompeticion")
                        .WithMany("TemporadaCompeticionOperacionEstadoCompeticion")
                        .HasForeignKey("EstadoCompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionOperacion_dbo.EstadoCompeticion_EstadoCompeticion_Id");

                    b.HasOne("Ligamania.Repository.Models.EstadoCompeticionDTO", "EstadoSiguiente")
                        .WithMany("TemporadaCompeticionOperacionEstadoSiguiente")
                        .HasForeignKey("EstadoSiguienteId")
                        .HasConstraintName("FK_dbo.TemporadaCompeticionOperacion_dbo.EstadoCompeticion_EstadoSiguiente_Id");

                    b.HasOne("Ligamania.Repository.Models.OperacionCompeticionDTO", "OperacionCompeticion")
                        .WithMany("TemporadaCompeticionOperacionOperacionCompeticion")
                        .HasForeignKey("OperacionCompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCompeticionOperacion_dbo.OperacionCompeticion_OperacionCompeticion_Id");

                    b.HasOne("Ligamania.Repository.Models.OperacionCompeticionDTO", "OperacionSiguiente")
                        .WithMany("TemporadaCompeticionOperacionOperacionSiguiente")
                        .HasForeignKey("OperacionSiguienteId")
                        .HasConstraintName("FK_dbo.TemporadaCompeticionOperacion_dbo.OperacionCompeticion_OperacionSiguiente_Id");

                    b.Navigation("Competicion");

                    b.Navigation("EstadoCompeticion");

                    b.Navigation("EstadoSiguiente");

                    b.Navigation("OperacionCompeticion");

                    b.Navigation("OperacionSiguiente");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaContabilidadDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaContabilidad")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaContabilidad_dbo.Temporada_Temporada_ID");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCuadroDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionDTO", "Competicion")
                        .WithMany("TemporadaCuadroCompeticion")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCuadro_dbo.TemporadaCompeticion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", "EquipoACategoria")
                        .WithMany("TemporadaCuadroEquipoACategoria")
                        .HasForeignKey("EquipoACategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCuadro_dbo.TemporadaCompeticionCategoria_EquipoA_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionDTO", "EquipoACompeticion")
                        .WithMany("TemporadaCuadroEquipoACompeticion")
                        .HasForeignKey("EquipoACompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCuadro_dbo.TemporadaCompeticion_EquipoA_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", "EquipoBCategoria")
                        .WithMany("TemporadaCuadroEquipoBCategoria")
                        .HasForeignKey("EquipoBCategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCuadro_dbo.TemporadaCompeticionCategoria_EquipoB_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionDTO", "EquipoBCompeticion")
                        .WithMany("TemporadaCuadroEquipoBCompeticion")
                        .HasForeignKey("EquipoBCompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCuadro_dbo.TemporadaCompeticion_EquipoB_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaCuadro")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaCuadro_dbo.Temporada_Temporada_ID");

                    b.Navigation("Competicion");

                    b.Navigation("EquipoACategoria");

                    b.Navigation("EquipoACompeticion");

                    b.Navigation("EquipoBCategoria");

                    b.Navigation("EquipoBCompeticion");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaEquipoDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("TemporadaEquipo")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaEquipo_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("TemporadaEquipo")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaEquipo_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.EquipoDTO", "Equipo")
                        .WithMany("TemporadaEquipo")
                        .HasForeignKey("EquipoId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaEquipo_dbo.Equipo_Equipo_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaEquipo")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaEquipo_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Competicion");

                    b.Navigation("Equipo");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaJornadaJugadorDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "Jornada")
                        .WithMany("TemporadaJornadaJugador")
                        .HasForeignKey("JornadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaJornadaJugador_dbo.TemporadaCompeticionJornada_Jornada_ID");

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("TemporadaJornadaJugador")
                        .HasForeignKey("JugadorId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaJornadaJugador_dbo.Jugador_Jugador_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaJornadaJugador")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaJornadaJugador_dbo.Temporada_Temporada_ID");

                    b.Navigation("Jornada");

                    b.Navigation("Jugador");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaJugadorDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.ClubDTO", "Club")
                        .WithMany("TemporadaJugador")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK_dbo.TemporadaJugador_dbo.Club_Club_ID");

                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("TemporadaJugador")
                        .HasForeignKey("Jugador_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaJugador_dbo.Jugador_Jugador_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "LastJornadaEliminacion")
                        .WithMany("TemporadaJugador")
                        .HasForeignKey("LastJornadaEliminacionId")
                        .HasConstraintName("FK_dbo.TemporadaJugador_dbo.TemporadaCompeticionJornada_ID");

                    b.HasOne("Ligamania.Repository.Models.PuestoDTO", "Puesto")
                        .WithMany("TemporadaJugador")
                        .HasForeignKey("PuestoId")
                        .HasConstraintName("FK_dbo.TemporadaJugador_dbo.Puesto_Puesto_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaJugador")
                        .HasForeignKey("Temporada_ID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaJugador_dbo.Temporada_Temporada_ID");

                    b.Navigation("Club");

                    b.Navigation("Jugador");

                    b.Navigation("LastJornadaEliminacion");

                    b.Navigation("Puesto");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaJugadorObsolete", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("TemporadaJugador_obsolete")
                        .HasForeignKey("JugadorId");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaJugador_obsolete")
                        .HasForeignKey("TemporadaId");

                    b.Navigation("Jugador");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPartidoDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CategoriaDTO", "Categoria")
                        .WithMany("TemporadaPartido")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaPartido_dbo.Categoria_Categoria_ID");

                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("TemporadaPartido")
                        .HasForeignKey("CompeticionId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaPartido_dbo.Competicion_Competicion_ID");

                    b.HasOne("Ligamania.Repository.Models.EquipoDTO", "EquipoA")
                        .WithMany("TemporadaPartidoEquipoA")
                        .HasForeignKey("EquipoAId")
                        .HasConstraintName("FK_dbo.TemporadaPartido_dbo.Equipo_Equipo_A_Id");

                    b.HasOne("Ligamania.Repository.Models.EquipoDTO", "EquipoB")
                        .WithMany("TemporadaPartidoEquipoB")
                        .HasForeignKey("EquipoBId")
                        .HasConstraintName("FK_dbo.TemporadaPartido_dbo.Equipo_Equipo_B_Id");

                    b.HasOne("Ligamania.Repository.Models.EquipoDTO", "EquipoGanador")
                        .WithMany("TemporadaPartidoEquipoGanador")
                        .HasForeignKey("EquipoGanadorId")
                        .HasConstraintName("FK_dbo.TemporadaPartido_dbo.Equipo_Equipo_Ganador_Id");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "Jornada")
                        .WithMany("TemporadaPartido")
                        .HasForeignKey("JornadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaPartido_dbo.TemporadaCompeticionJornada_Jornada_ID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaPartido")
                        .HasForeignKey("TemporadaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaPartido_dbo.Temporada_Temporada_ID");

                    b.Navigation("Categoria");

                    b.Navigation("Competicion");

                    b.Navigation("EquipoA");

                    b.Navigation("EquipoB");

                    b.Navigation("EquipoGanador");

                    b.Navigation("Jornada");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPremiosDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", "Categoria")
                        .WithMany("TemporadaPremios")
                        .HasForeignKey("CategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaPremios_dbo.TemporadaCompeticionCategoria_Categoria_ID");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPremiosPuestoDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.TemporadaPremiosDTO", "PremioCategoria")
                        .WithMany("TemporadaPremiosPuesto")
                        .HasForeignKey("PremioCategoriaId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaPremiosPuesto_dbo.TemporadaPremios_PremioCategoria_ID");

                    b.Navigation("PremioCategoria");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPuestoJugadorDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.JugadorDTO", "Jugador")
                        .WithMany("TemporadaPuestoJugador")
                        .HasForeignKey("JugadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ligamania.Repository.Models.PuestoDTO", "Puesto")
                        .WithMany("TemporadaPuestoJugador")
                        .HasForeignKey("PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("TemporadaPuestoJugador")
                        .HasForeignKey("TemporadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jugador");

                    b.Navigation("Puesto");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaRondaDTO", b =>
                {
                    b.HasOne("Ligamania.Repository.Models.CompeticionDTO", "Competicion")
                        .WithMany("Rondas")
                        .HasForeignKey("CompeticionID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaRonda_dbo.Competicion_CompeticionID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "JornadaIda")
                        .WithMany()
                        .HasForeignKey("JornadaIdaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", "JornadaVuelta")
                        .WithMany()
                        .HasForeignKey("JornadaVueltaID");

                    b.HasOne("Ligamania.Repository.Models.TemporadaDTO", "Temporada")
                        .WithMany("Rondas")
                        .HasForeignKey("TemporadaID")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.TemporadaRonda_dbo.Temporada_TemporadaID");

                    b.Navigation("Competicion");

                    b.Navigation("JornadaIda");

                    b.Navigation("JornadaVuelta");

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ligamania.Repository.LigamaniaApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ligamania.Repository.LigamaniaApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ligamania.Repository.LigamaniaApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ligamania.Repository.LigamaniaApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CalendarioDTO", b =>
                {
                    b.Navigation("CalendarioDetalle");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CategoriaDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionCambio");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("AlineacionPrevia");

                    b.Navigation("CompeticionCategoria");

                    b.Navigation("PuntuacionHistorica");

                    b.Navigation("TemporadaClasificacion");

                    b.Navigation("TemporadaCompeticionCategoria");

                    b.Navigation("TemporadaEquipo");

                    b.Navigation("TemporadaPartido");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.ClubDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionCambioClub");

                    b.Navigation("AlineacionCambioClubCambio");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("AlineacionPrevia");

                    b.Navigation("TemporadaClubJugador");

                    b.Navigation("TemporadaJugador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CompeticionCategoriaDTO", b =>
                {
                    b.Navigation("CuadroCopaEquipoA");

                    b.Navigation("CuadroCopaEquipoB");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.CompeticionDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionCambio");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("AlineacionPrevia");

                    b.Navigation("CompeticionCategoria");

                    b.Navigation("PuntuacionHistorica");

                    b.Navigation("Rondas");

                    b.Navigation("TemporadaClasificacion");

                    b.Navigation("TemporadaCompeticion");

                    b.Navigation("TemporadaCompeticionCategoria");

                    b.Navigation("TemporadaCompeticionJornada");

                    b.Navigation("TemporadaEquipo");

                    b.Navigation("TemporadaPartido");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.EquipoDTO", b =>
                {
                    b.Navigation("CambiosEquipoEquipoDestino");

                    b.Navigation("CambiosEquipoEquipoOrigen");

                    b.Navigation("TemporadaClasificacion");

                    b.Navigation("TemporadaEquipo");

                    b.Navigation("TemporadaPartidoEquipoA");

                    b.Navigation("TemporadaPartidoEquipoB");

                    b.Navigation("TemporadaPartidoEquipoGanador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.EstadoCompeticionDTO", b =>
                {
                    b.Navigation("TemporadaCompeticion");

                    b.Navigation("TemporadaCompeticionOperacionEstadoCompeticion");

                    b.Navigation("TemporadaCompeticionOperacionEstadoSiguiente");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.JugadorDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionCambioJugador");

                    b.Navigation("AlineacionCambioJugadorCambio");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("AlineacionPrevia");

                    b.Navigation("TemporadaClubJugador");

                    b.Navigation("TemporadaJornadaJugador");

                    b.Navigation("TemporadaJugador");

                    b.Navigation("TemporadaJugador_obsolete");

                    b.Navigation("TemporadaPuestoJugador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.OperacionCompeticionDTO", b =>
                {
                    b.Navigation("TemporadaCompeticion");

                    b.Navigation("TemporadaCompeticionOperacionOperacionCompeticion");

                    b.Navigation("TemporadaCompeticionOperacionOperacionSiguiente");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.PuestoDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionCambio");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("AlineacionPrevia");

                    b.Navigation("TemporadaJugador");

                    b.Navigation("TemporadaPuestoJugador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionCategoriaDTO", b =>
                {
                    b.Navigation("Historico");

                    b.Navigation("TemporadaCompeticionCategoriaReferencia");

                    b.Navigation("TemporadaCuadroEquipoACategoria");

                    b.Navigation("TemporadaCuadroEquipoBCategoria");

                    b.Navigation("TemporadaPremios");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionDTO", b =>
                {
                    b.Navigation("TemporadaCompeticionOperacion");

                    b.Navigation("TemporadaCuadroCompeticion");

                    b.Navigation("TemporadaCuadroEquipoACompeticion");

                    b.Navigation("TemporadaCuadroEquipoBCompeticion");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaCompeticionJornadaDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("TemporadaClasificacion");

                    b.Navigation("TemporadaJornadaJugador");

                    b.Navigation("TemporadaJugador");

                    b.Navigation("TemporadaPartido");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionCambio");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("AlineacionPrevia");

                    b.Navigation("CambiosEquipo");

                    b.Navigation("Historico");

                    b.Navigation("Rondas");

                    b.Navigation("TemporadaClasificacion");

                    b.Navigation("TemporadaClubJugador");

                    b.Navigation("TemporadaCompeticion");

                    b.Navigation("TemporadaCompeticionCategoria");

                    b.Navigation("TemporadaCompeticionCategoriaReferencia");

                    b.Navigation("TemporadaCompeticionJornada");

                    b.Navigation("TemporadaContabilidad");

                    b.Navigation("TemporadaCuadro");

                    b.Navigation("TemporadaEquipo");

                    b.Navigation("TemporadaJornadaJugador");

                    b.Navigation("TemporadaJugador");

                    b.Navigation("TemporadaJugador_obsolete");

                    b.Navigation("TemporadaPartido");

                    b.Navigation("TemporadaPuestoJugador");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaEquipoDTO", b =>
                {
                    b.Navigation("Alineacion");

                    b.Navigation("AlineacionCambio");

                    b.Navigation("AlineacionHistorica");

                    b.Navigation("AlineacionPrevia");

                    b.Navigation("Historico");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaPremiosDTO", b =>
                {
                    b.Navigation("TemporadaPremiosPuesto");
                });

            modelBuilder.Entity("Ligamania.Repository.Models.TemporadaRondaDTO", b =>
                {
                    b.Navigation("JornadasFinal");
                });
#pragma warning restore 612, 618
        }
    }
}

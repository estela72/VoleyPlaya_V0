@inject LigamaniaCoreApp.Services.ILigamaniaService ligamaniaService
@inject ApplicationUserManager<ApplicationUser> UserManager

@using LigamaniaCoreApp.Models.ManagerViewModels
@using LigamaniaCoreApp.Data

@model IEnumerable<TemporadaEquipoViewModel>

@{
    ViewData["Title"] = "Alta y Baja de Equipos en Pretemporada";
    var equipos = Model.OrderBy(e=>e.OrdenCompeticion).ThenBy(e => e.OrdenCategoria).ThenBy(e => e.Equipo).ToList();
    var categorias = await ligamaniaService.GetAllCategorias(LigamaniaEnum.eTipoCompeticion.Liga.ToString());
    var listaSiNo = new SelectList(new List<string> { LigamaniaConst.SI, LigamaniaConst.NO });
    var listaCateg = new SelectList(new List<string> { LigamaniaConst.Categoria_SilverA, LigamaniaConst.Categoria_SilverB, LigamaniaConst.SinPreferencia });
    ICollection<Tuple<string, string>> userNames = await UserManager.GetListofEntrenadores();
    var listUserNames = new SelectList(userNames, "Item2", "Item2");
    var nombreEquipos = Model.GroupBy(e=>e.Equipo).Select(grp => grp.Key).ToList();
    var listEquipos = new SelectList(nombreEquipos); //, "Equipo", "Equipo");

}

<h2>Alta y Baja de Equipos</h2>
<div class="flex-container-stretch">
    <div class="flex-item-fit card">
        <div class="card-body">
            <h6>Para cambiar un equipo de categoría, 'Seleccionar la nueva categoría' y pulsar sobre el botón 'Confirmar'</h6>
            <h6>Si ya estuviera confirmado, 'Desconfirmar' y luego ir al punto anterior</h6>
            <div id="grid-equipos" class="mvc-grid" data-name="" data-filter-mode="FilterRow" data-source-url="">
                @(Html
                    .Grid(equipos)
                    .Build(columns =>
                    {
                        columns.Add(model => model.Competicion).Titled("Competición");
                        columns.Add(model => model.Categoria).Titled("Categoría");
                        columns.Add(model => model.Equipo).Titled("Equipo");
                        columns.Add().Encoded(false).Titled("Seleccionar nueva categoría")
                            .RenderedAs(c => @Html.DropDownList("nuevaCategoria" + c.Id, categorias, new { @class = "form-control nuevaCategoria", @id = "nuevaCategoria" + c.Id }));

                        columns.Add(model =>
                            !model.Confirmada ? $"<button class='btn-primary' id=\"{model.Id}\" categoria=\"{model.Categoria}\" equipo=\"{model.Equipo}\" onClick=\"buttonConfirmarTemporada(this.id, this.categoria,this.equipo)\">Confirmar</button> No confirmado"
                                                : $"<button class='btn-primary' id=\"{model.Id}\" onClick=\"buttonDesconfirmarTemporada(this.id)\">Desconfirmar</button> Confirmado").Encoded(false);
                        columns.Add(model =>
                            !model.Pagada ? $"<button class='btn-primary' id=\"{model.Id}\" onClick=\"buttonPagarTemporada(this.id)\">Pagar</button> No Pagada"
                                            : $"<button class='btn-primary' id=\"{model.Id}\" onClick=\"buttonNoPagarTemporada(this.id)\">Pagar</button> Pagada").Encoded(false);
                        columns.Add(model =>
                            !model.Baja ? $"<button class='btn-primary' id=\"{model.Id}\" onClick=\"buttonBajaTemporada(this.id)\">Dar de baja</button> Activo"
                                            : $"<button class='btn-primary' id=\"{model.Id}\" onClick=\"buttonAltaTemporada(this.id)\">Dar de alta</button> Baja").Encoded(false);
                    })
                    .Empty("No hay equipos")
                    .WithFilterMode(GridFilterMode.FilterRow)
                    .Id("equipos")
                    .Css("mvc-grid-medium") // Overwrites all classes with the new ones
                    .Pageable(pager =>
                    {
                        pager.RowsPerPage = 18;
                    })
                    .Filterable()
                    .Sortable()
                )
            </div>
        </div>
        <div class="card-footer">
            <button type="button" class='btn btn-primary btn-lg' data-toggle='modal' data-target='#addEquipoEntrenadorModal'>Nuevo entrenador y Nuevo equipo</button>
            <button type="button" class='btn btn-primary btn-lg' data-toggle='modal' data-target='#addEquipoModal'>Nuevo equipo para entrenador existente</button>
            <button type="button" class='btn btn-primary btn-lg' data-toggle='modal' data-target='#sustituirEquipoModal'>Sustituir un equipo por otro existente</button>
        </div>
    </div>
</div>
<div class="modal fade" id="addEquipoEntrenadorModal" tabindex="-1" role="dialog" aria-labelledby="addEquipoEntrenadorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEquipoEntrenadorModalLabel">Nuevo equipo</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createEquipoEntrenador" class="needs-validation" action="#" novalidate>
                    <div class="form-group">
                        <label for="add-username">Nombre del Entrenador:</label>
                        <input type="text" class="form-control" id="add-username" placeholder="Nombre del entrenador (debe ser único)" required>
                    </div>
                    <div class="form-group">
                        <label for="add-email">Email:</label>
                        <input type="text" class="form-control" id="add-email" placeholder="Email del entrenador (debe ser único)" required>
                    </div>
                    <div class="form-group">
                        <label for="add-password">Password:</label>
                        <input type="text" class="form-control" id="add-password" placeholder="Password inicial" required>
                    </div>
                    <div class="form-group">
                        <label for="add-city">Ciudad de residencia:</label>
                        <input type="text" class="form-control" id="add-ciudad" placeholder="Ciudad de residencia" required>
                    </div>
                    <div class="form-group">
                        <label for="add-conocimiento">¿Cómo nos conociste?:</label>
                        <input type="text" class="form-control" id="add-conocimiento" placeholder="¿Cómo nos conociste?" required>
                    </div>
                    <div class="form-group">
                        <label for="add-whatsapp">¿Quieres recibir whatsapp con las novedades e incidencias?:</label>
                        @Html.DropDownList("add-whatsapp", listaSiNo, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                    <div class="form-group">
                        <label for="add-telefono">Nº de teléfono de contacto:</label>
                        <input type="text" class="form-control" id="add-telefono" placeholder="Nº de teléfono de contacto" required>
                    </div>
                    <div class="form-group">
                        <label for="add-esbot">¿Es un equipo BOT?:</label>
                        @Html.DropDownList("add-esbot", listaSiNo, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                    <div class="form-group">
                        <label for="add-equipo">Nombre del equipo (debe ser único):</label>
                        <input type="text" class="form-control" id="add-equipo" placeholder="Nombre del equipo (debe ser único)" required>
                    </div>
                    <div class="form-group">
                        <label for="add-categoriapreferida">Categoría preferida (si quieres compartir con amigos):</label>
                        @Html.DropDownList("add-categoriapreferida", listaCateg, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-save="modal-add">Guardar</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addEquipoModal" tabindex="-1" role="dialog" aria-labelledby="addEquipoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addEquipoModalLabel">Nuevo equipo</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="createEquipo" class="needs-validation" action="#" novalidate>
                    <div class="form-group">
                        <label for="add-equi-username">Entrenador:</label>
                        @Html.DropDownList("add-equi-username", listUserNames, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                    <div class="form-group">
                        <label for="add-equi-esbot">¿Es un equipo BOT?:</label>
                        @Html.DropDownList("add-equi-esbot", listaSiNo, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                    <div class="form-group">
                        <label for="add-equi-equipo">Nombre del equipo (debe ser único):</label>
                        <input type="text" class="form-control" id="add-equi-equipo" placeholder="Nombre del equipo (debe ser único)" required>
                    </div>
                    <div class="form-group">
                        <label for="add-equi-categoriapreferida">Categoría preferida (si quieres compartir con amigos):</label>
                        @Html.DropDownList("add-equi-categoriapreferida", listaCateg, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-save="modal-add">Guardar</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="sustituirEquipoModal" tabindex="-1" role="dialog" aria-labelledby="sustituirEquipoModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sustituirEquipoModalLabel">Sustituye un equipo por otro existente una vez comenzada la competición. 
                Modifica el calendario de partidos y la clasificación. El equipo ya debe existir ([Nuevo equipo y nuevo entrenador])</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="sustituirEquipo" class="needs-validation" action="#" novalidate>
                    <div class="form-group">
                        <label for="add-equi-username">Equipo actual que va a ser sustituido:</label>
                        @Html.DropDownList("equi-existente", listEquipos, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                    <div class="form-group">
                        <label for="add-equi-username">Nuevo equipo:</label>
                        @Html.DropDownList("equi-nuevo", listEquipos, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-save="modal-add">Sustituir</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function buttonConfirmarTemporada(elementid, categoria, equipoNombre) {
        var celda = document.getElementById("nuevaCategoria" + elementid);
        var categoriaSelected = celda.value;

        categoria = event.target.getAttribute("categoria");
        equipoNombre = event.target.getAttribute("equipo");

        var r = confirm("¿Está seguro de querer confirmar el equipo en " + categoriaSelected + "?");
        if (r == true) {
            const equipo = {
                Id: elementid,
                Accion: true,
                NuevaCategoria: categoriaSelected,
                Categoria: categoria,
                Equipo: equipoNombre
            };
            var urlToCall = '/MANAGERC/ConfirmarDesconfirmarTemporada';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipo),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al confirmar un equipo");
                }
            }).done(function (response) {
                alert(response.message);
                location.reload();
            });
        }
    }
    function buttonDesconfirmarTemporada(elementid) {
        var r = confirm("¿Está seguro de desconfirmar el equipo?");
        if (r == true) {
            const equipo = {
                Id: elementid,
                Accion: false
            };
            var urlToCall = '/MANAGERC/ConfirmarDesconfirmarTemporada';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipo),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al desconfirmar un equipo");
                }
            }).done(function (response) {
                alert(response.message);
                location.reload();
            });
        }
    }
    function buttonPagarTemporada(elementid) {
        var r = confirm("El equipo ha pagado la temporada. ¿Está seguro?");
        if (r == true) {
            const equipo = {
                Id: elementid,
                Accion: true
            };
            var urlToCall = '/MANAGERC/PagarTemporada';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipo),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al pagar una temporada");
                }
            }).done(function (response) {
                alert(response.message);
                location.reload();
            });
        }
    }
    function buttonNoPagarTemporada(elementid) {
        const equipo = {
            Id: elementid,
            Accion: false
        };
        var urlToCall = '/MANAGERC/PagarTemporada';
        $.ajax({
            type: "POST",
            data: JSON.stringify(equipo),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function () {
                alert("Error al indicar no pago de temporada");
            }
        }).done(function () {
            alert(response.message);
            location.reload();
        });
    }
    function buttonBajaTemporada(elementid) {
        var r = confirm("¿Está seguro de dar de baja el equipo?");
        if (r == true) {
            const equipo = {
                Id: elementid,
                Accion: true
            };
            var urlToCall = '/MANAGERC/DarBajaTemporada';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipo),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al dar de baja un equipo");
                }
            }).done(function (response) {
                alert(response.message);
                location.reload();
            });
        }
    }
    function buttonAltaTemporada(elementid) {
        var r = confirm("¿Está seguro de dar de alta el equipo?");
        if (r == true) {
            const equipo = {
                Id: elementid,
                Accion: false
            };
            var urlToCall = '/MANAGERC/DarBajaTemporada';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipo),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al dar de alta un equipo");
                }
            }).done(function (response) {
                alert(response.message);
                location.reload();
            });
        }
    }
</script>

<script type="text/javascript">
    $('#addEquipoEntrenadorModal').on('click', '[data-save="modal-add"]', function (event) {
        var username = $('#add-username').val();
        var email = $('#add-email').val();
        var password = $('#add-password').val();
        var ciudad = $('#add-ciudad').val();
        var conocimiento = $('#add-conocimiento').val();
        var whatsapp = $('#add-whatsapp').val();
        var telefono = $('#add-telefono').val();
        var esbot = $('#add-esbot').val();
        var equipo = $('#add-equipo').val();
        var categoriapreferida = $('#add-categoriapreferida').val();
        var boolWhatsapp = false;
        if (whatsapp === "SI") { boolWhatsapp = true; }
        var boolEsbot = false;
        if (esbot === "SI") { boolEsbot = true; }
        var checkSoloEquipo = false;
        var nuevoEquipo = {
            UserName: username,
            Email: email,
            Password: password,
            City: ciudad,
            Conocimiento: conocimiento,
            Whatsapp: boolWhatsapp,
            PhoneNumber: telefono,
            EsBot: boolEsbot,
            Equipo: equipo,
            CategoriaPreferida: categoriapreferida,
            CheckSoloEquipo: checkSoloEquipo
        };

        var form = $('#createEquipoEntrenador');
        checkEquipo(username, email, equipo, checkSoloEquipo, function (equipoChecked) {
            if (equipoChecked === 0) {   // no existe el equipo, ni el email ni el username => lo podemos crear
                crearEquipo(nuevoEquipo, function (equipoCreado) {
                    alert(equipoCreado.message);
                    $('#addEquipoEntrenadorModal').modal('hide');
                    location.reload();
                });
            }
            else if (equipoChecked === 1) {
                alert('Username existente: ' + username);
            }
            else if (equipoChecked === 2) {
                alert('Email existente: ' + email);
            }
            else if (equipoChecked === 3) {
                alert('Equipo existente: ' + equipo);
            }
        })
    });
    $('#addEquipoModal').on('click', '[data-save="modal-add"]', function (event) {
        var username = $('#add-equi-username').val();
        var esbot = $('#add-equi-esbot').val();
        var equipo = $('#add-equi-equipo').val();
        var categoriapreferida = $('#add-equi-categoriapreferida').val();
        var boolEsbot = false;
        if (esbot === "SI") { boolEsbot = true; }
        var checkSoloEquipo = true;
        var email = " ";
        var nuevoEquipo = {
            UserName: username,
            EsBot: boolEsbot,
            Equipo: equipo,
            CategoriaPreferida: categoriapreferida,
            CheckSoloEquipo: checkSoloEquipo
        };

        var form = $('#createEquipo');
        checkEquipo(username, email, equipo, checkSoloEquipo, function (equipoChecked) {
            if (equipoChecked === 0) {   // no existe el equipo, ni el email ni el username => lo podemos crear
                crearEquipo(nuevoEquipo, function (equipoCreado) {
                    alert(equipoCreado.message);
                    $('#addEquipoModal').modal('hide');
                    location.reload();
                });
            }
            else if (equipoChecked === 1) {
                alert('Username existente: ' + username);
            }
            else if (equipoChecked === 2) {
                alert('Email existente: ' + email);
            }
            else if (equipoChecked === 3) {
                alert('Equipo existente: ' + equipo);
            }
        })
    });
    $('#sustituirEquipoModal').on('click', '[data-save="modal-add"]', function (event) {
        var equipoActual = $('#equi-existente').val();
        var equipoNuevo = $('#equi-nuevo').val();
        var sustitucion = {
            Equipo: equipoActual,
            NuevoEquipo: equipoNuevo
        };
        var r = confirm("Se va a sustituir el equipo " + equipoActual + " por el equipo " + equipoNuevo + " en la temporada actual. Incluído calendario y clasificaciones.¿Estás seguro?");
        if (r === true) {
            sustituirEquipo(sustitucion, function (equipoSustituido) {
                alert(equipoSustituido.message);
                if (equipoSustituido.result) {
                    $('#sustituirEquipoModal').modal('hide');
                    location.reload();
                }
            });
        }
    });
    function checkEquipo(username, email, equipo, checkSoloEquipo, callback) {
        var equipo = {
            UserName: username,
            Email: email,
            Equipo: equipo,
            CheckSoloEquipo: checkSoloEquipo
        };
        var respuesta = -2;
        $.ajax({
            type: "POST",
            url: "/MANAGERC/CheckNuevoEquipo",
            data: JSON.stringify(equipo),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                respuesta = -1;
            }
        }).done(function (data) {
            callback(data);
        });
        return respuesta;
    }
    function crearEquipo(nuevoEquipo, callback) {
        var urlToCall = '/MANAGERC/NuevoEquipo';
        $.ajax({
            type: "POST",
            data: JSON.stringify(nuevoEquipo),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al crear un nuevo equipo");
            }
        }).done(function (data) {
            callback(data);
        });
    }
    function sustituirEquipo(sustituirEquipo, callback) {
        var urlToCall = '/MANAGERC/SustituirEquipo';
        $.ajax({
            type: "POST",
            data: JSON.stringify(sustituirEquipo),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al sustituir un equipo");
            }
        }).done(function (data) {
            callback(data);
        });
    }
</script>
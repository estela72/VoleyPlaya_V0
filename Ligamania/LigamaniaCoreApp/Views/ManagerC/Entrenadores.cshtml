@using LigamaniaCoreApp.Models.AccountViewModels
@using  LigamaniaCoreApp.Models.ManagerViewModels
@using  LigamaniaCoreApp.Data;
@model EntrenadorEquipoViewModel

@{
    ViewData["Title"] = "Entrenadores";
    var entrenadores = Model.Entrenadores;
    var equipos = Model.Equipos.OrderBy(e => e.Equipo).ToList();
    var listaSiNo = new SelectList(new List<string> { LigamaniaEnum.eSINO.SI.ToString(), LigamaniaEnum.eSINO.NO.ToString() });
    var inventarioUsuarios = Model.InventarioEntrenadores.OrderBy(u => u.UserName).ToList();
    ;
}

<h2 class="text-center">Entrenadores activos en Ligamanía</h2>
<div class="row">
    <div id="grid-entrenadores" class="mvc-grid" data-name="" data-filter-mode="FilterRow" data-source-url="">
        @{
            @(Html
                    .Grid(entrenadores)
                    .Build(columns =>
                    {
                        columns.Add(model => model.Equipo).Titled("Equipo");
                        columns.Add(model => model.UserName).Titled("Entrenador");
                        columns.Add(model => model.Email).Titled("Email");
                        columns.Add(model => model.PhoneNumber).Titled("Nº teléfono");
                        columns.Add(model => model.CategoriaPreferida).Titled("Categoría preferida");
                        columns.Add(model => model.City).Titled("Ciudad");
                        columns.Add(model => model.Conocimiento).Titled("Como conoció Ligamanía");
                        columns.Add(model => model.Whatsapp ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("Recibir whatsapp");
                        columns.Add(model => model.EsBot ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("Es BOT");
                        columns.Add(model => $"<button type='button' class='btn btn-primary' data-equipo=\"{model.Equipo}\" data-entrenador=\"{model.UserName}\" data-email=\"{model.Email}\" " +
                            $"data-telefono=\"{model.PhoneNumber}\" data-esbot=\"{model.EsBot}\" data-id=\"{model.EquipoId}\" " +
                            $"data-toggle='modal' data-target='#editMenuModal'>Editar</button>").Encoded(false);
                    })
                    .Css("webgrid-noticiaAplicacion") // Overwrites all classes with the new ones
                    .Empty("No hay entrenadores")
                    .WithFilterMode(GridFilterMode.FilterRow)
                    .Id("ajax-grid-entrenadores")
                    .Pageable(pager =>
                    {
                        pager.RowsPerPage = 15;
                    })
                    .Filterable()
                    .Sortable()
            )
        }
    </div>
</div>

<div class="row">
    <div class="card">
        <h2 class="text-center">Inventario de Equipos de Ligamanía</h2>
        <div id="grid-equipos" class="mvc-grid" data-name="" data-filter-mode="FilterRow" data-source-url="">
            @{
                @(Html
                        .Grid(equipos)
                        .Build(columns =>
                        {
                            columns.Add(model => model.Equipo).Titled("Equipo");
                            columns.Add(model => model.Entrenador).Titled("Entrenador");
                            columns.Add(model => model.Baja ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("Baja");
                            columns.Add(model => model.EsBOT? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("BOT");
                            columns.Add(model => model.Baja ? $"<button type='button' class='btn btn-primary' onclick='activarEquipo(\"{model.Equipo}\")'>Activar</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='desactivarEquipo(\"{model.Equipo}\")'>Desactivar</button>").Encoded(false);
                            columns.Add(model => model.EsBOT ? $"<button type='button' class='btn btn-primary' onclick='equipoNoBot(\"{model.Equipo}\")'>No es BOT</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='equipoBot(\"{model.Equipo}\")'>Es BOT</button>").Encoded(false);
                        })
                        .Css("webgrid-noticiaAplicacion") // Overwrites all classes with the new ones
                        .Empty("No hay equipos")
                        .WithFilterMode(GridFilterMode.FilterRow)
                        .Id("ajax-grid-equipos")
                        .Pageable(pager =>
                        {
                            pager.RowsPerPage = 15;
                        })
                        .Filterable()
                        .Sortable()
                )
            }
        </div>
    </div>

    <div class="card">
        <h2 class="text-center">Inventario de Usuarios de Ligamanía</h2>
        <div id="grid-invent" class="mvc-grid" data-name="" data-filter-mode="FilterRow" data-source-url="">
            @{
                @(Html
                    .Grid(inventarioUsuarios)
                    .Build(columns =>
                    {
                        columns.Add(model => model.UserName).Titled("Entrenador");
                        columns.Add(model => model.Email).Titled("Email");
                        columns.Add(model => model.Equipo).Titled("Equipo");
                        columns.Add(model => model.EstadoUsuario).Titled("Estado");
                        columns.Add(model => model.EsEntrenador ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("¿Es Entrenador?");
                        columns.Add(model => model.EsBot ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("¿Es BOT?");
                        columns.Add(model => model.StringRoles).Titled("Roles");

                        columns.Add(model => $"<button type='button' class='btn btn-primary' onclick='confirmarEntrenador(\"{model.UserName}\")'>Confirmar</button>").Encoded(false).Titled("Confirmar");
                        columns.Add(model => $"<button type='button' class='btn btn-primary' onclick='bajaEntrenador(\"{model.UserName}\")'>Baja</button>").Encoded(false).Titled("Baja");
                        columns.Add(model => $"<button type='button' class='btn btn-primary' onclick='registrarEntrenador(\"{model.UserName}\")'>Registrar</button>").Encoded(false).Titled("Registrar");

                        columns.Add(model => model.EsEntrenador ? $"<button type='button' class='btn btn-primary' onclick='eliminarComoEntrenador(\"{model.UserName}\")'>No es entrenador</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='esEntrenador(\"{model.UserName}\")'>Es entrenador</button>").Encoded(false).Titled("Entrenador");
                        columns.Add(model => model.EsBot ? $"<button type='button' class='btn btn-primary' onclick='noEsBot(\"{model.UserName}\")'>No es BOT</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='esBot(\"{model.UserName}\")'>Es BOT</button>").Encoded(false).Titled("Bot");

                        columns.Add(model => $"<button type='button' class='btn btn-primary' data-usuario=\"{model.UserName}\"  data-roles=\"{model.StringRoles}\"" +
                            $"data-toggle='modal' data-target='#editRolesModal'>Modificar Roles</button>").Encoded(false);

                    })
                .Css("webgrid-noticiaAplicacion") // Overwrites all classes with the new ones
                .Empty("No hay equipos")
                .WithFilterMode(GridFilterMode.FilterRow)
                .Id("ajax-grid-equipos")
                .Pageable(pager =>
                {
                    pager.RowsPerPage = 15;
                })
                .Filterable()
                .Sortable()
                )
            }
        </div>
    </div>
</div>

<div class="modal fade" id="editMenuModal" tabindex="-1" role="dialog" aria-labelledby="editMenuModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editMenuModalLabel">Editando... </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <input type="hidden" class="form-control" id="edit-equipoId">
                    <div class="form-group">
                        <label for="edit-equipo-text" class="col-form-label">Equipo:</label>
                        <input type="text" class="form-control" id="edit-equipo-text" disabled>
                    </div>
                    <div class="form-group">
                        <label for="edit-equipoNuevo-text" class="col-form-label">Nuevo nombre de Equipo:</label>
                        <input type="text" class="form-control" id="edit-equipoNuevo-text">
                    </div>
                    <div class="form-group">
                        <label for="edit-entrenador-text" class="col-form-label">Entrenador:</label>
                        <input type="text" class="form-control" id="edit-entrenador-text">
                    </div>
                    <div class="form-group">
                        <label for="edit-email-text" class="col-form-label">Email:</label>
                        <input type="text" class="form-control" id="edit-email-text">
                    </div>
                    <div class="form-group">
                        <label for="edit-telefono-text" class="col-form-label">Teléfono:</label>
                        <input type="text" class="form-control" id="edit-telefono-text">
                    </div>
                    <div class="form-group">
                        <label for="edit-esbot-text">¿Es un equipo BOT?:</label>
                        @Html.DropDownList("edit-esbot-text", listaSiNo, "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-save="modal-edit">Guardar</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editRolesModal" tabindex="-1" role="dialog" aria-labelledby="editRolesModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editRolesModalLabel">Editando... </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="edit-usuario-text" class="col-form-label">Usuario:</label>
                        <input type="text" class="form-control" id="edit-usuario-text" disabled>
                    </div>
                    <div class="form-group">
                        <label for="edit-roles-text">Roles:</label>
                        <input type="text" class="form-control" id="edit-roles-text" disabled>
                    </div>
                    <div class="form-group">
                        <label for="edit-listroles-text">Seleccionar rol para agregar o eliminar:</label>
                        @Html.DropDownList("edit-listroles-text", new SelectList(Model.ExistingRoles), "Seleccionar...", new { @class = "custom-select", required = "required" })
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-save="modal-add-role">Agregar rol</button>
                <button type="button" class="btn btn-primary" data-save="modal-remove-role">Eliminar rol</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>



<script type="text/javascript">
    $('#editMenuModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal
        var id = button.data('id') // Extract info from data-* attributes
        var equipo = button.data('equipo')
        var entrenador = button.data('entrenador')
        var email = button.data('email')
        var telefono = button.data('telefono')
        var esbot = button.data('esbot')
        var bot = "SI";
        if (!esbot) bot = "NO";
        // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
        var modal = $(this)
        modal.find('.modal-title').text('Edición de equipo ' + equipo)
        modal.find('#edit-equipoId').val(id)
        modal.find('#edit-equipo-text').val(equipo)
        modal.find('#edit-equipoNuevo-text').val(equipo)
        modal.find('#edit-entrenador-text').val(entrenador)
        modal.find('#edit-email-text').val(email)
        modal.find('#edit-telefono-text').val(telefono)
        modal.find('#edit-esbot-text').val(bot)
    })

    $('#editMenuModal').on('click', '[data-save="modal-edit"]', function (event) {
        event.preventDefault();
        var id = $('#edit-equipoId').val();
        var equipo = $('#edit-equipo-text').val();
        var equipoNuevo = $('#edit-equipoNuevo-text').val();
        var entrenador = $('#edit-entrenador-text').val();
        var email = $('#edit-email-text').val();
        var telefono = $('#edit-telefono-text').val();
        var esbot = $('#edit-esbot-text').val();
        var bot = true;
        if (esbot === "NO") bot = false;
        const equipoInfo = {
            EquipoId: id,
            Equipo: equipo,
            EquipoNuevo: equipoNuevo,
            UserName: entrenador,
            Email: email,
            PhoneNumber: telefono,
            EsBot: bot
        };
        var urlToCall = '/MANAGERC/EditarEquipo';
        $.ajax({
            type: "POST",
            data: JSON.stringify(equipoInfo),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al modificar equipo");
            }
        }).done(function (response) {
            alert(response.message);
            if (response.result) {
                $('#editMenuModal').modal('hide');
                location.reload();
            }
        });
    });

    $('#editRolesModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal
        var user = button.data('usuario')
        var userRoles = button.data('roles')
        // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
        var modal = $(this)
        modal.find('.modal-title').text('Modificar roles del usuario ' + user)
        modal.find('#edit-usuario-text').val(user)
        modal.find('#edit-roles-text').val(userRoles)
    })

    $('#editRolesModal').on('click', '[data-save="modal-add-role"]', function (event) {
        event.preventDefault();
        var user = $('#edit-usuario-text').val();
        var rolSelected = $('#edit-listroles-text').val();

        alert('Add role ' + rolSelected + ' to user ' + user);

        const equipoInfo = {
            //EquipoId: id,
            //Equipo: equipo,
            //EquipoNuevo: equipoNuevo,
            UserName: user,
            //Email: email,
            //PhoneNumber: telefono,
            //EsBot: bot
            NewRole: rolSelected
        };
        var urlToCall = '/MANAGERC/AddRoleToUser';
        $.ajax({
            type: "POST",
            data: JSON.stringify(equipoInfo),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al agregar un rol");
            }
        }).done(function (response) {
            alert(response.message);
            if (response.result) {
                $('#editRolesModal').modal('hide');
                location.reload();
            }
        });
    });

    $('#editRolesModal').on('click', '[data-save="modal-remove-role"]', function (event) {
        event.preventDefault();
        var user = $('#edit-usuario-text').val();
        var rolSelected = $('#edit-listroles-text').val();

        alert('Remove role ' + rolSelected + ' from user ' + user);

        const equipoInfo = {
            //EquipoId: id,
            //Equipo: equipo,
            //EquipoNuevo: equipoNuevo,
            UserName: user,
            //Email: email,
            //PhoneNumber: telefono,
            //EsBot: bot
            NewRole: rolSelected
        };
        var urlToCall = '/MANAGERC/RemoveRoleFromUser';
        $.ajax({
            type: "POST",
            data: JSON.stringify(equipoInfo),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al eliminar un rol");
            }
        }).done(function (response) {
            alert(response.message);
            if (response.result) {
                $('#editRolesModal').modal('hide');
                location.reload();
            }
        });

    });


    function activarEquipo(equipo) {
        var r = confirm("¿Está seguro de querer activar el equipo: " + equipo + "?");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: true
            };
            var urlToCall = '/MANAGERC/ActivarDesactivarEquipo';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al activar el equipo " + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al activar el equipo " + equipo);
                }
            });
        }
    };

    function desactivarEquipo(equipo) {
        var r = confirm("¿Está seguro de querer desactivar el equipo: " + equipo + "?");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: false
            };
            var urlToCall = '/MANAGERC/ActivarDesactivarEquipo';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al desactivar el equipo " + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al desactivar el equipo " + equipo);
                }
            });
        }
    };

    function equipoNoBot(equipo) {
        var r = confirm("¿Está seguro que no es BOT el equipo: " + equipo + "?");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: false
            };
            var urlToCall = '/MANAGERC/BotNoBotEquipo';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al activar el equipo " + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al activar el equipo " + equipo);
                }
            });
        }
    };

    function equipoBot(equipo) {
        var r = confirm("¿Está seguro de que es BOT el equipo: " + equipo + "?");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: true
            };
            var urlToCall = '/MANAGERC/BotNoBotEquipo';
            $.ajax({
                type: "POST",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al desactivar el equipo " + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al desactivar el equipo " + equipo);
                }
            });
        }
    };

    function eliminarComoEntrenador(usuario) {
        var r = confirm("¿Está seguro de querer marcar el usuario: " + usuario + " como NO entrenador?");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: usuario,
                Accion: "noEsEntrenador"
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al marcar el usuario " + usuario + " como NO entrenador");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al marcar el usuario " + usuario + " como NO entrenador");
                }
            });
        }
    };

    function esEntrenador(usuario) {
        var r = confirm("¿Está seguro de querer marcar el usuario: " + usuario + " como entrenador?");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: usuario,
                Accion: "esEntrenador"
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al marcar el usuario " + usuario + " como entrenador");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al marcar el usuario " + usuario + " como entrenador");
                }
            });
        }
    };

    function noEsBot(usuario) {
        var r = confirm("¿Está seguro de querer marcar el usuario: " + usuario + " como NO BOT?");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: usuario,
                Accion: "noEsBot"
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al marcar el usuario " + usuario + " como NO BOT");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al marcar el usuario " + usuario + " como NO BOT");
                }
            });
        }
    };

    function esBot(usuario) {
        var r = confirm("¿Está seguro de querer marcar el usuario: " + usuario + " como BOT?");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: usuario,
                Accion: "esBot"
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al marcar el usuario " + usuario + " como BOT");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al marcar el usuario " + usuario + " como BOT");
                }
            });
        }
    };

    function confirmarEntrenador(entrenador) {
        var r = confirm("¿Está seguro de querer confirmar el entrenador: " + entrenador + "?");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: entrenador,
                Accion: "confirmar"
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al confirmar el entrenador " + entrenador);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al confirmar el entrenador " + entrenador);
                }
            });
        }
    };

    function bajaEntrenador(entrenador) {
        var r = confirm("¿Está seguro de querer dar de baja el entrenador: " + entrenador + "?");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: entrenador,
                Accion: "baja"
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al dar de baja el entrenador " + entrenador);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al dar de baja el entrenador " + entrenador);
                }
            });
        }
    };
    function registrarEntrenador(entrenador) {
        var r = confirm("¿Está seguro de querer registrar el entrenador: " + entrenador + "?");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: entrenador,
                Accion: "registrar"
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al registrar el entrenador " + entrenador);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert("Error al registrar el entrenador " + entrenador);
                }
            });
        }
    };

</script>
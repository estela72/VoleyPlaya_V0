@using LigamaniaCoreApp.Models.ManagerViewModels;

@model InfoPreparacionTemporadaViewModel
@{
    ViewData["Title"] = "Cierre de Temporada Actual";
    var temporada = "sin establecer";
    ICollection<TemporadaCompeticionViewModel> competiciones = new List<TemporadaCompeticionViewModel>();
    string estadoActual = "sin establecer";
    int temporadaActualId = 0;
    if (Model.Actual != null)
    {
        temporada = Model.Actual.Temporada;
        temporadaActualId = Model.Actual.Id;
        competiciones = Model.Actual.Competiciones.ToList();
        estadoActual = Model.Actual.EstadoTemporada.ToString();
    }
    var pretemporada = "sin establecer";
    ICollection<TemporadaCompeticionViewModel> competicionesPretemporada = new List<TemporadaCompeticionViewModel>();
    string estadoPretemporada = "sin establecer";
    int pretemporadaId = 0;
    if (Model.Pretemporada != null)
    {
        pretemporada = Model.Pretemporada.Temporada;
        pretemporadaId = Model.Pretemporada.Id;
        competicionesPretemporada = Model.Pretemporada.Competiciones.ToList();
        estadoPretemporada = Model.Pretemporada.EstadoTemporada.ToString();
    }
}
    <div class="p-5">
        <div class="flex-item-bold-center card">
            <div class="card-header" style="background-color:lightgoldenrodyellow">
                <h2>Temporada Actual: @temporada - Estado: @estadoActual</h2>
            </div>
            <div class="card-body">
                <h3 class="text-center">Competiciones</h3>
                <div id="grid-competiciones" class="mvc-grid col-offset-1" data-name="" data-filter-mode="FilterRow" data-source-url="">
                    @(Html
                        .Grid(competiciones)
                        .Build(columns =>
                        {
                            columns.Add(model => model.Competicion).Titled("Competición");
                            columns.Add(model => model.EstadoCompeticion).Titled("Estado");
                            columns.Add(model => !model.EstadoCompeticion.Equals("Finalizada") ? $"<button class='btn-primary'  id=\"{model.Id}\" onClick=\"buttonFinalizarCompeticionClicked(this.id)\">Finalizar</button>" : " ").Encoded(false);
                        })
                        .Empty("No hay competiciones")
                        .Id("competiciones")
                        .Css("mvc-grid-large") // Overwrites all classes with the new ones
                    )
                </div>
            </div>
            <div class="card-footer">
                <div class="btn-toolbar mb-3" role="toolbar" aria-label="Toolbar with button groups">
                    @if (Model.Actual != null && Model.Actual.EstadoTemporada.ToString().Equals("Cerrada"))
                    {
                        <button class="btn-secondary" id="button-finalizar-temporada" disabled>Cerrar Temporada</button>
                    }
                    else if (Model.Actual != null)
                    {
                        <button class="btn-primary" id="button-finalizar-temporada">Finalizar Temporada</button>
                    }
                    @if (Model.Actual != null)
                    {
                        <button class="btn-primary offset-1" style="padding:10px" id="button-limpiar-basedatos">Limpiar base de datos</button>
                        <button class="btn-primary offset-1" style="padding:10px" id="button-no-actual">Convertir a histórica</button>
                    }
                </div>
            </div>
        </div>
        <hr />
       
        @if (Model.Pretemporada != null && pretemporada != temporada)
        {
            <div class="flex-item-bold-center card">
                <div class="card-header" style="background-color:lightblue">
                    <h2>Temporada: @Model.Pretemporada.Temporada - @Model.Pretemporada.EstadoTemporada</h2>
                </div>
                <div class="card-body">
                    <h3 class="text-center">Competiciones</h3>
                    <div id="grid-competiciones" class="mvc-grid" data-name="" data-filter-mode="FilterRow" data-source-url="">
                        @(Html
                            .Grid(Model.Pretemporada.Competiciones)
                            .Build(columns =>
                            {
                                //columns.Add(model => !model.EstadoCompeticion.Equals("Finalizada") ? $"<button class='btn-primary'  id=\"{model.Id}\" onClick=\"buttonFinalizarCompeticionClicked(this.id)\">Finalizar</button>" : " ").Encoded(false);
                                columns.Add(model => model.Competicion).Titled("Competición");
                                columns.Add(model => model.EstadoCompeticion).Titled("Estado");
                            })
                            .Empty("No hay competiciones creadas")
                            .Id("competiciones-pretemmporada")
                            .Css("mvc-grid-xlarge") // Overwrites all classes with the new ones
                            .AppendCss("table-hover") // Appends classes to the current ones
                        )
                    </div>
                </div>
                @if (!Model.Pretemporada.Competiciones.Any())
                {
                <div class="card-footer">
                    <h3>Copiar competición Liga y equipos desde la última temporada</h3>
                    <div class="btn-group p-2" role="group" aria-label="Toolbar with button groups">
                        <button type="button" class="btn btn-primary mr-2" id="btnAgregarLiga" value="Submit">Agregar competición Liga y equipos</button>
                        <button type="button" class="btn btn-primary" id="btnTemporadaActual">Convertir Pretemporada a Temporada Actual</button>
                    </div>
                    <p style="color:lightcoral">Convertir Pretemporada a Temporada Actual se debe hacer una vez que ya se tengan preparados los equipos y se esté seguro que no se quiere volver a la temporada anterior</p>
                </div>
                    <script type="text/javascript">
                        var agregarLiga = document.getElementById("btnAgregarLiga");
                        agregarLiga.addEventListener("click", buttonAgregarLigaPretemporada);

                        function buttonAgregarLigaPretemporada() {
                            var urlToCall = '/MANAGERC/AgregarLigaPretemporada';
                            $.ajax({
                                type: "POST",
                                url: urlToCall,
                                contentType: "application/json; charset=utf-8",
                                processData: true,
                                cache: false,
                                async: false,
                                dataType: 'json',
                                error: function (response) {
                                    alert("Error al agregar la Liga");
                                }
                            }).done(function (response) {
                                alert(response.message);
                                if (alert.result) {
                                    location.reload();
                                }
                            });

                        }
                    </script>

                }
                else
                {
                    <div class="card-footer">
                        <div class="col-md-offset-1 form-inline">
                            <button class="btn btn-primary offset-1" id="btnTemporadaActual">Convertir a Temporada Actual</button>
                        </div>
                    </div>

                }
            </div>
        }
        else
        {
            <div class="flex-item-bold-center card">
                <div class="card-header p-2">
                    <h3>Crear nueva TEMPORADA</h3>
                </div>
                <div class="card-body">
                    <div class="input-group-mb3">
                        <span class="input-group-text" id="basic-addon1">Introducir temporada (aaaa-aaaa):</span>
                        <input type="text" class="form-control" id="nuevaTemporada">
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-primary" id="btnCrearTemporada">Crear temporada</button>
                </div>
            </div>
        }
    </div>
<style>
    .css-classes {
        font-size: large;
    }
</style>

<script type="text/javascript">
    var noActual = document.getElementById("button-no-actual");
    noActual.addEventListener("click", buttonConvertirAHistorica);

    function buttonConvertirAHistorica() {
        const temporada = {
            Id: @temporadaActualId
        };

        var urlToCall = '/MANAGERC/ConvertirAHistorica';
        $.ajax({
            type: "POST",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            async: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al convertir temporada a histórica");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }
</script>

<script type="text/javascript">
    var crearTemp = document.getElementById("btnCrearTemporada");
    crearTemp.addEventListener("click", buttonCrearTemporada);

    function buttonCrearTemporada() {
        var nuevaTemporada = $('#nuevaTemporada').val();
        const temporada = {
            Temporada: nuevaTemporada
        };
        var urlToCall = '/MANAGERC/CrearTemporada';
        $.ajax({
            type: "POST",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            async: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al crear una temporada");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });

    }
</script>

<script type="text/javascript">
    function buttonFinalizarCompeticionClicked(id) {
        const competicion = {
            Id: id
        };
        var urlToCall = '/MANAGERC/FinalizarCompeticion';
        //alert(urlToCall);
        $.ajax({
            type: "POST",
            data: JSON.stringify(competicion),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al finalizar la competición");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }
</script>

<script type="text/javascript">
    var finTemp = document.getElementById("button-finalizar-temporada");
    finTemp.addEventListener("click", buttonFinalizarTemporada);

    function buttonFinalizarTemporada() {
        const temporada = {
            Id: @temporadaActualId
            };
        //alert(temporada.Id);
        var urlToCall = '/MANAGERC/FinalizarTemporada';
        $.ajax({
            type: "POST",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            cache: false,
            async: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al finalizar la temporada");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }
</script>

<script type="text/javascript">
    var limpiarBD = document.getElementById("button-limpiar-basedatos");
    limpiarBD.addEventListener("click", buttonLimpiarBD);

    function buttonLimpiarBD() {
        const temporada = {
            Id: @temporadaActualId
        };
        //alert(temporada.Id);
        var urlToCall = '/MANAGERC/LimpiarBaseDatos';
        $.ajax({
            type: "POST",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            error: function (response) {
                alert("Error al limpiar la base de datos");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }

</script>

<script>
    $('#btnTemporadaActual').on('click', function (event) {
        var r = confirm("¿Está seguro de querer que la pretemporada pase a ser la TEMPORADA ACTUAL?");
        if (r == true) {
            var urlToCall = '/MANAGERC/PreTemporadaToActual';
            $.ajax({
                type: "POST",
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error crear temporada actual" + competicion);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(response.message);
                }
            });
        }

    });
</script>
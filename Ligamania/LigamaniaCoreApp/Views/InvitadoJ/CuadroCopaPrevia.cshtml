@using Newtonsoft.Json

@using LigamaniaCoreApp.Models.ManagerViewModels
@model IEnumerable<TemporadaRondaPartidos>
@{
    if (Model == null)
    {
        <div>
            <h1 style="padding:5rem;color:red;"><strong>Cuado de Copa aún sin establecer</strong></h1>
        </div>
    }
}
@if (Model != null)
{
    var rondaPrevia1 = Model.FirstOrDefault(r => r.Ronda == 1);
    var rondaPrevia2 = Model.FirstOrDefault(r => r.Ronda == 2);

    <div>
        <a class="nav-link" asp-area="" asp-controller="InvitadoJ" asp-action="ClasificacionLigaCopa" title="Ver Clasificacion">Ver clasificación de Liga para establecer el Cuadro</a>
    </div>
    <div>
        <a class="nav-link" asp-area="" asp-controller="InvitadoJ" asp-action="CuadroCopa" title="Ver el Cuadro Final de Copa">Cuadro Final de Copa</a>
    </div>
    <div class="row">
        <div class="panel-body">
            <canvas id="canvasRonda" width="1700" height="1700" style="border:0px solid #ccc"></canvas>
        </div>
    </div>
    <div>
        <a class="nav-link" asp-area="" asp-controller="InvitadoJ" asp-action="CuadroCopa" title="Ver el Cuadro Final de Copa">Cuadro Final de Copa</a>
    </div>
}

<script type="text/javascript">
    var rondas = @Html.Raw(JsonConvert.SerializeObject(Model.OrderBy(r=>r.Ronda).ToList()));

    // Get canvas
    var canvas = document.getElementById("canvasRonda");
    var ctx = document.getElementById("canvasRonda").getContext("2d");

    var colorCanvas = "#D3D3D3";
    var altoCanvas = 1700;
    var colLeft = 25;
    var width = 250;
    var height = 30;
    var difHEqui = 40;

    // ***** PINTADO DE LINKS *****
    // Links
    var Links = new Array(); // Links information
    var hoverLink = ""; // Href of the link which cursor points at

    ctx.beginPath();

    for (var r = 0; r < 2; r++) {

        var ronda = rondas[r].Ronda;
        var data = rondas[r].Partidos;

        var title1 = "Eliminatoria Previa - Ronda " + ronda;
        var title2 = "Jornada " + rondas[r].JornadaIda + " (" + convertDate(rondas[r].FechaIda) + ")";
        var title3 = "Jornada " + rondas[r].JornadaVuelta + " (" + convertDate(rondas[r].FechaVuelta) + ")";

        if (ronda == 2) { colorCanvas = "#DCDCDC"; }

        var rowSup = 45;
        var anchoCanvas = 850;
        //if (r == 1) { anchoCanvas = 750;}
        colLeft = colLeft + ((ronda - 1) * anchoCanvas);
        ctx.fillStyle = colorCanvas;
        ctx.fillRect(colLeft, 0, anchoCanvas, altoCanvas);
        ctx.fillStyle = "#000000";

        pintaCabeceraRonda(rowSup, colLeft, height);
        rowSup = rowSup + (height * 4);
        ctx.font = "18px Arial";
        var colorPartido = "khaki";
        for (var i = 0; i < data.length; i++) { // recorro los partidos (ida y vuelta)
            pintaPartido(data[i], rowSup, colLeft, width, height, difHEqui, data[i].Id,colorPartido);
            rowSup = rowSup + (height * 4);
            if (colorPartido === "khaki") {
                colorPartido = "darkkhaki";
            } else {
                colorPartido = "khaki";
            }
        }
    }

    ctx.stroke();
    /*---------------------------------------------------------------------------------*/
    function convertDate(inputFormat) {
        function pad(s) { return (s < 10) ? '0' + s : s; }
        var d = new Date(inputFormat)
        return [pad(d.getDate()), pad(d.getMonth() + 1), d.getFullYear()].join('/')
    }

    // INICIO DE FUNCIONES DE PINTADO
    // funciones de pintado
    function pintaCabeceraRonda(row, col, height) {
        ctx.font = "24px Arial";
        ctx.fillText(title1, col, row);
        row = row + height;
        ctx.fillText(title2, col, row);
        row = row + height;
        ctx.fillText(title3, col, row);
    }
    function pintaPartido(partido, row, col, w, h, sep,idPartido, colorPart) {
        var rowEquipoA = row;
        var rowEquipoB = row + (h * 2);

        // nº de partido
        var colNum = col + (w / 2);
        var rowNum = rowEquipoA + h + (h / 2);
        ctx.font = "12px Arial";
        ctx.fillText("Partido nº "+ partido.NumeroPartido, colNum , rowNum);

        ctx.font = "18px Arial";

        col = col + 20;
        pintaEquipo(partido.EquipoA, rowEquipoA, col, w, h,colorPart);
        pintaEquipo(partido.EquipoB, rowEquipoB, col, w, h, colorPart);

        var colResultado = col + w;
        var wResultado = 25;
        if (partido.PartidoIda != null && partido.PartidoVuelta != null) {
            pintaResultado(partido.PartidoIda, partido.PartidoVuelta, rowEquipoA, rowEquipoB, colResultado, wResultado, h);
        }
        else {
            pintaResultadoEquipo("-", "-", rowEquipoA, colResultado, wResultado, h);
            pintaResultadoEquipo("-", "-", rowEquipoB, colResultado, wResultado, h);
        }
        var colGanador = colResultado + (wResultado * 3);
        var rowGanador = rowEquipoA + h;
        if (partido.Ganador != null) {
            pintaGanadorPartido(partido.Ganador, partido.Criterio, rowGanador, colGanador, w-50, h,idPartido);
        }
    }
    function pintaEquipo(equipo, row, col, w, h, color) {
        var fillAnt = ctx.fillStyle;
        ctx.fillStyle = color;
        ctx.fillRect(col - 10, row, w, h);
        ctx.fillStyle = fillAnt;
        ctx.fillText(equipo, col, row + 20);
    }
    function pintaResultado(partidoIda, partidoVuelta, rowEquipoA, rowEquipoB, colResI, wRes, h) {
        pintaResultadoEquipo(partidoIda.ResultadoA, partidoVuelta.ResultadoB, rowEquipoA, colResI, wRes, h);
        pintaResultadoEquipo(partidoIda.ResultadoB, partidoVuelta.ResultadoA, rowEquipoB, colResI, wRes, h);
    }
    function pintaResultadoEquipo(resultadoIda, resultadoVuelta, row, colResI, wRes, h) {
        ctx.rect(colResI - 10, row, wRes, h);
        ctx.fillText(resultadoIda, colResI - 2, row + 20);
        var colResV = colResI + wRes;
        ctx.rect(colResV - 10, row, wRes, h);
        ctx.fillText(resultadoVuelta, colResV - 2, row + 20);

        var resultadoGlobal = resultadoIda + resultadoVuelta;
        colResV = colResV + wRes;
        ctx.fillStyle = "moccasin";
        ctx.fillRect(colResV - 10, row, wRes, h);
        ctx.fillStyle = "#000000";
        ctx.fillText(resultadoGlobal, colResV - 2, row + 20);     // RESULTADO GLOBAL DEL PARTIDO
        ctx.fillStyle = "#000000";
    }
    function pintaGanadorPartido(ganador, criterio, row, col, w, h,idPartido) {
        //ctx.fillStyle = "papayawhip";
        //ctx.rect(col - 10, row, w, h);
        ctx.fillStyle = "green";
        ctx.fillText(ganador, col, row + 20);
        ctx.fillStyle = "#000000";
        var linkText = "[" + criterio + "]";
        var href = "/InvitadoJ/CriterioGanador?idPartido=" + idPartido;
        drawLink(col+w,row+20,href,linkText,Links);
        @*ctx.fillText("[" + criterio + "]", col + w, row + 20);*@
    }
    // Draw the link
    function drawLink(x,y,href,title){
        var linkTitle = title,
            linkX = x,
            linkY = y,
            linkWidth = ctx.measureText(linkTitle).width,
            linkHeight = parseInt(ctx.font); // Get lineheight out of fontsize

        var fillStylePrev = ctx.fillStyle;
        ctx.fillStyle = "#0000ff"; // Default blue link color
        //ctx.font = "15px Courier New"; // Monospace font for links
        //ctx.textBaseline = "top"; // Makes left top point a start point for rendering text

        // Draw the link
        ctx.fillText(linkTitle, linkX, linkY);
        ctx.fillStyle = fillStylePrev; // Default blue link color

        //// Underline the link (you can delete this block)
        //ctx.beginPath();
        //ctx.moveTo(linkX, linkY + linkHeight);
        //ctx.lineTo(linkX + linkWidth, linkY + linkHeight);
        //ctx.lineWidth = 1;
        //ctx.strokeStyle = "#0000ff";
        //ctx.stroke();

        // Add mouse listeners
        canvas.addEventListener("mousemove", on_mousemove, false);
        canvas.addEventListener("click", on_click, false);

        // Add link params to array
        Links.push(x + ";" + y + ";" + linkWidth + ";" + linkHeight + ";" + href);
    }

    // Link hover
    function on_mousemove (ev) {
        var x, y;

        // Get the mouse position relative to the canvas element
        if (ev.layerX || ev.layerX == 0) { // For Firefox
            x = ev.layerX;
            y = ev.layerY;
        }

        // Link hover
        for (var i = Links.length - 1; i >= 0; i--) {
            var params = new Array();

            // Get link params back from array
            params = Links[i].split(";");

            var linkX = parseInt(params[0]),
                linkY = parseInt(params[1]),
                linkWidth = parseInt(params[2]),
                linkHeight = parseInt(params[3]),
                linkHref = params[4];

            // Check if cursor is in the link area
            if (x >= linkX && x <= (linkX + linkWidth) && y >= linkY && y <= (linkY + linkHeight)){
                document.body.style.cursor = "pointer";
                hoverLink = linkHref;
                break;
            }
            else {
                document.body.style.cursor = "";
                hoverLink = "";
            }
        };
    }

    // Link click
    function on_click(e) {
        if (hoverLink){
            window.open(hoverLink); // Use this to open in new tab
            //window.location = hoverLink; // Use this to open in current window
        }
    }
</script>
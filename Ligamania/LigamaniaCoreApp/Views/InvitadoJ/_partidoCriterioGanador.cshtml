@inject LigamaniaCoreApp.Services.ILigamaniaService ligamaniaService

@model LigamaniaCoreApp.Models.ManagerViewModels.TemporadaPartidoViewModel

@{
    var equipoA = Model.AlineacionEquipoA.OrderBy(a => a.OrdenPuesto).ToList();
    var equipoB = Model.AlineacionEquipoB.OrderBy(a => a.OrdenPuesto).ToList();

    var editable = "false";
    var jornada = 0;
    var verCriterioParam = "false";
    if (ViewData["editable"] != null) { editable = ViewData["editable"].ToString(); }
    var esEditable = (editable == "true") ? true : false;
    if (ViewData["jornada"] != null) { jornada = (int)ViewData["jornada"]; }
    if (ViewData["verCriterio"] != null) { verCriterioParam = ViewData["verCriterio"].ToString(); }
    var verCriterio = (verCriterioParam == "true") ? true : false;
}

<div class="flex-container align-self-start">
    <div class="d-flex justify-content-start">
        <div class="card align-self-start">
            <div class="card-header">
                @Model.EquipoA - @Model.ResultadoA
            </div>
            <div class="card-body">
                @(Html
                        .Grid(equipoA)
                        .Build(columns =>
                        {
                            //int row = 1;
                            //columns.Add().Titled("#").RenderedAs(model => row++);
                            //columns.Add().RenderedAs((model, row) => row + 1).Titled("#");
                            columns.Add(model => model.Jugador).Titled("Jugador");
                            columns.Add(model => model.Alias).Titled("Club");
                            columns.Add(model => model.Puesto).Titled("Puesto");
                            columns.Add(model => model.GF).Titled("GF");
                            columns.Add(model => model.GC).Titled("GC");
                            //columns.Add(model => model.Cambiado).Titled("Cambiado");
                            //columns.Add(model => model.Eliminado).Titled("Eliminado");
                            //columns.Add(model => model.Preeliminado).Titled("Preeliminado");
                            if (verCriterio)
                            {
                                columns.Add(model => model.MinutosJugados).Titled("Min");
                                columns.Add(model => model.TarjetasRojas).Titled("T.Rojas");
                                columns.Add(model => model.TarjetasAmarillas).Titled("T.Amarillas");
                            }
                            if (esEditable)
                            {
                                columns.Add(model => $"<button type='button' class='btn btn-primary' " +
                                $"data-jugador=\"{model.Jugador}\" data-puesto=\"{model.Puesto}\" data-jornada=\"{jornada}\" " +
                                $"data-minutos=\"{model.MinutosJugados}\" data-rojas=\"{model.TarjetasRojas}\" data-amarillas=\"{model.TarjetasAmarillas}\" " +
                                $"data-toggle='modal' data-target='#editJugadorModal'>Min y Tarjetas</button>").Encoded(false);
                            }
                        })
                        .WithFooter("_partidoCarruselFooter")
                        .Css("mvc-grid-fila-carrusel") // Overwrites all classes with the new ones
                        .RowAttributed(model =>
                            new
                            {
                                @style = model.Cambiado && model.Eliminado ? "font-weight:bold;background-color:red" :
                                           model.Cambiado && model.Preeliminado ? "font-weight:bold;background-color:yellow" :
                                           model.Eliminado ? "font-weight:normal;background-color:red" :
                                           model.Preeliminado ? "font-weight:normal;background-color:yellow" :
                                           model.Cambiado ? "font-weight:bold" : "font-weight:normal"
                            })
                        .Empty("No tiene alineación")
                        .Id("ajax-grid-ali-equipoA")
                )
            </div>
        </div>
        <div class="card align-self-start">
            <div class="card-header">
                @Model.EquipoB -  @Model.ResultadoB
            </div>
            <div class="card-body">
                @(Html
                        .Grid(equipoB)
                        .Build(columns =>
                        {
                            columns.Add(model => model.Jugador).Titled("Jugador");
                            columns.Add(model => model.Alias).Titled("Club");
                            columns.Add(model => model.Puesto).Titled("Puesto");
                            columns.Add(model => model.GF).Titled("GF");
                            columns.Add(model => model.GC).Titled("GC");
                            //columns.Add(model => model.Cambiado).Titled("Cambiado");
                            //columns.Add(model => model.Eliminado).Titled("Eliminado");
                            //columns.Add(model => model.Preeliminado).Titled("Preeliminado");
                            //int row = 1;
                            //columns.Add().Titled("#").RenderedAs(model => row++);
                            //columns.Add().RenderedAs((model, row) => row + 1).Titled("#");
                            if (verCriterio)
                            {
                                columns.Add(model => model.MinutosJugados).Titled("Min");
                                columns.Add(model => model.TarjetasRojas).Titled("T.Rojas");
                                columns.Add(model => model.TarjetasAmarillas).Titled("T.Amarillas");
                            }
                            if (esEditable)
                            {
                                columns.Add(model => $"<button type='button' class='btn btn-primary' " +
                                $"data-jugador=\"{model.Jugador}\" data-puesto=\"{model.Puesto}\" data-jornada=\"{jornada}\" " +
                                $"data-minutos=\"{model.MinutosJugados}\" data-rojas=\"{model.TarjetasRojas}\" data-amarillas=\"{model.TarjetasAmarillas}\" " +
                                $"data-toggle='modal' data-target='#editJugadorModal'>Min y Tarjetas</button>").Encoded(false);
                            }
                        })
                        .Css("mvc-grid-fila-carrusel") // Overwrites all classes with the new ones
                        .RowAttributed(model =>
                            new
                                {
                                    @style = model.Cambiado && model.Eliminado ? "font-weight:bold;background-color:red" :
                                        model.Cambiado && model.Preeliminado ? "font-weight:bold;background-color:yellow" :
                                        model.Eliminado ? "background-color:red" :
                                        model.Preeliminado ? "background-color:yellow" :
                                        model.Cambiado ? "font-weight:bold" : "font-weight:500"
                                })
                        .WithFooter("_partidoCarruselFooter")
                        .Empty("No tiene alineación")
                        .Id("ajax-grid-ali-equipoB")
                )
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editJugadorModal" tabindex="-1" role="dialog" aria-labelledby="editJugadorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content" style="width:1025px;">
            <div class="modal-header">
                <h5 class="modal-title" id="editJugadorModalLabel">Editando...</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form class="flex-container">
                    <div class="row">
                        <div class="form-group">
                            <div class="hidden" id="jornadaModal"></div>
                            <span class="input-group-text">Jugador:</span>
                            <input type="text" class="form-control" id="jugadorModal" readonly>
                        </div>
                        <div class="form-group">
                            <span class="input-group-text" id="basic-addon1">Puesto:</span>
                            <input type="text" class="form-control" id="puestoModal" readonly>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group">
                            <span class="input-group-text">Minutos jugados:</span>
                            <input type="number" class="form-control" id="minutosModal">
                        </div>
                        <div class="form-group">
                            <span class="input-group-text">Tarjetas amarillas:</span>
                            <input type="number" class="form-control" id="tamarillasModal">
                        </div>
                        <div class="form-group">
                            <span class="input-group-text">Tarjetas rojas:</span>
                            <input type="number" class="form-control" id="trojasModal">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-save="modal-edit">Guardar</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script>
    $('#editJugadorModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal
        //alert(button);
        var jugador = button.data('jugador');
        var puesto = button.data('puesto');
        var jornada = button.data('jornada');
        var minutos = button.data('minutos');
        var rojas = button.data('rojas');
        var amarillas = button.data('amarillas');
        //alert(competicion + jornada + fecha);
        // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
        var modal = $(this);
        modal.find('#jugadorModal').val(jugador);
        modal.find('#puestoModal').val(puesto);
        modal.find('#jornadaModal').val(jornada);
        modal.find('#minutosModal').val(minutos);
        modal.find('#trojasModal').val(rojas);
        modal.find('#tamarillasModal').val(amarillas);
    });
    $('#editJugadorModal').on('click', '[data-save="modal-edit"]', function (event) {
        //event.preventDefault();
        var jugador = $('#jugadorModal').val();
        var puesto = $('#puestoModal').val();
        var jornada = $('#jornadaModal').val();
        var minutos = $('#minutosModal').val();
        var rojas = $('#trojasModal').val();
        var amarillas = $('#tamarillasModal').val();
        //alert(jugador + puesto + minutos + rojas+ amarillas);
        var jugadorEditar = {
            Jugador: jugador,
            Puesto: puesto,
            NumeroJornada:jornada,
            MinutosJugados: minutos,
            TarjetasRojas: rojas,
            TarjetasAmarillas: amarillas
        };
        var urlToCall = '/ADMINT/EditarJugador';
        $.ajax({
            type: "POST",
            data: JSON.stringify(jugadorEditar),
            url: urlToCall,
            contentType: "application/json; charset=utf-8",
            processData: true,
            async:false,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert("Error al guardar los datos");
            }
        }).done(function (response) {
            alert(response.message);
            if (response.result) {
                $('#editJugadorModal').modal('hide');
                location.reload();
            }
        });
        event.stopImmediatePropagation();
    });
</script>
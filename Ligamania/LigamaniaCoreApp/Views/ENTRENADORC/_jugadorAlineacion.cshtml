@model LigamaniaCoreApp.Models.EntrenadorViewModels.InfoAlineacion
@inject LigamaniaCoreApp.Services.ILigamaniaService ligamaniaService
@using LigamaniaCoreApp.Data

@{
    var equipo = ViewData["equipo"].ToString();
    var competicion = ViewData["competicion"].ToString();
    var puesto = ViewData["puesto"].ToString();
    var aliIni = (bool)ViewData["aliIni"];
    var cambios = (bool)ViewData["cambios"];
    var lista = ViewData["lista"] as IEnumerable<SelectListItem>;
    var listaEliminados = ViewData["listaEliminados"] as IEnumerable<string>;
    var listaEliminadosJornada = ViewData["listaEliminadosJornada"] as IEnumerable<string>;
    var maxcambiosfijos = (int)ViewData["maxcambiosfijos"];
    var numCambiosFijosRealizados = (int)ViewData["numCambiosFijosRealizados"];
    var numCambiosExtrasRealizados = (int)ViewData["numCambiosExtrasRealizados"];
    var numJugadoresEliminadosJornada = (int)ViewData["numJugadoresEliminadosJornada"];

    var numeliminados = listaEliminadosJornada.Count();
    bool cambiosFijosRealizados = false;
    bool cambiosExtrasRealizados = false;

    if (numCambiosFijosRealizados >= maxcambiosfijos) { cambiosFijosRealizados = true; }
    if (numCambiosExtrasRealizados >= numJugadoresEliminadosJornada) { cambiosExtrasRealizados = true; }

    //if (numCambiosRealizados >= (maxcambios + numJugadoresEliminadosJornada)) { cambiosRealizados = true; }
    //if (numCambiosRealizados >= maxcambios) { cambiosRealizados = true; }

    // establecer el estilo de cada jugador
    var styleCambio = "background-color:white;color:black";
    var styleEliminado = "background-color:red;color:white";
    var styleEliminadoJornada = "background-color:cyan;color:red";
    var styleCambiado = "background-color:yellow;color:black";
    var colorJugador = "color:yellow;";
    var styleBaja = "background-color:white; color:red";

    bool esCambioNormal = true;
    if (Model != null && listaEliminadosJornada.Contains(Model.JugadorPrevia.Jugador)) { esCambioNormal = false; }


    bool activado = (esCambioNormal && !cambiosFijosRealizados) || (!esCambioNormal && !cambiosExtrasRealizados);
    bool eliminar = false;
    if (!aliIni && !cambios) { activado = false; }
    else if (aliIni) { activado = true; styleCambio = styleCambiado; eliminar = true; }
    else if (Model != null && Model.JugadorCambio.Jugador != Model.JugadorPrevia.Jugador && cambios) { activado = true; styleCambio = styleCambiado; eliminar = true; }
    else if (Model != null && Model.JugadorCambio.Jugador != Model.JugadorPrevia.Jugador && aliIni) { activado = true; styleCambio = styleCambiado; eliminar = false; }

    if (Model != null && listaEliminados.Contains(Model.JugadorPrevia.Jugador)) { colorJugador = "color:white;";  }
    if (Model != null && listaEliminadosJornada.Contains(Model.JugadorPrevia.Jugador)) { colorJugador = "color:cyan;";  }

    if (Model != null && listaEliminados.Contains(Model.JugadorCambio.Jugador)) { styleCambio = styleEliminado; }
    if (Model != null && listaEliminadosJornada.Contains(Model.JugadorCambio.Jugador)) { styleCambio = styleEliminadoJornada; }

    var jugadorYaCambiado = (Model!=null) ? Model.JugadorCambio.AliasJugador : string.Empty;

    if (Model != null && Model.JugadorCambio.PendienteBaja) { styleCambio = styleBaja; }

    //ViewBag.equipo = equipo;
}
@if (Model != null)
{
    <div style="@colorJugador">
        @Html.DisplayFor(m => Model.JugadorPrevia.AliasJugador, new { @class = "form-control" })
    </div>
    if (activado)
    {
        @Html.DropDownListFor(m => Model.JugadorCambio.AliasJugador, lista, "Seleccionar un jugador", new { @id = @Model.JugadorPrevia.AliasJugador, @competicion=competicion, @previousValue = jugadorYaCambiado, @equipo=equipo, @class = "form-control", @onchange = "JugadorChange(this.value,this.id, this)", @style = styleCambio})
    }
    else
    {
        @Html.DropDownListFor(m => Model.JugadorCambio.AliasJugador, lista, "Seleccionar un jugador", new { @id = @Model.JugadorPrevia.AliasJugador, @competicion=competicion, @previousValue = jugadorYaCambiado, @equipo=equipo, @class = "form-control", @onchange = "JugadorChange(this.value,this.id, this)", @style = styleCambio,@disabled="disabled" })
    }
    @if (eliminar)
    {
        <a href='@Url.Action("CancelChange", "EntrenadorC", new { equipo=@equipo, competicion=@competicion, jugador = Model.JugadorCambio.AliasJugador, jugadorCambio=Model.JugadorPrevia.AliasJugador })' style="color:yellow">
            <i class="fas fa-trash-alt"></i>
            <span class="sr-only"></span>
        </a>
    }
}
<script type="text/javascript" charset="utf-8">
    function JugadorChange(jugadorCambio, jugador, selectCtrl) {
        showSpinner();
        var prevVal = $(selectCtrl).attr('previousValue');
        if (prevVal !== 'undefined') { jugador = prevVal; }
        var equipo = $(selectCtrl).attr('equipo');
        var competicion = $(selectCtrl).attr('competicion');

        //alert(competicion);
        var r = true; // confirm("¿Está seguro de cambiar "+jugador+" por "+jugadorCambio+"?");
        if (r == true) {
            
            const infoCambioJugador = {
                Equipo: equipo,
                Competicion: competicion,
                Jugador: jugador,
                JugadorCambio: jugadorCambio
            };
            var urlToCall = '/ENTRENADORC/CambioJugador';
            $.ajax({
                type: "POST",
                data: JSON.stringify(infoCambioJugador),
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType:'json',
                error: function () {
                    alert("Error al realizar el cambio de jugador");
                    hideSpinner();
                }
            }).done(function (response) {
                alert(response.message);
                if (response.result) {
                    location.reload();
                }
                if (!response.result) {
                    $(selectCtrl).val(jugador);
                }
                hideSpinner();
            });
        }
    }
function showSpinner() {
    document.body.style.cursor = 'wait';
}
function hideSpinner() {
    document.body.style.cursor = 'arrow';
}
</script>

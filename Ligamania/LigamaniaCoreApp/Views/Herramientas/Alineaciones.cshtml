@inject ILigamaniaService _ligamaniaService
@using LigamaniaCoreApp.Models.HerramientasViewModels
@model AlineacionCompeticionViewModel

@{
    ViewData["Title"] = "Herr: Alineaciones";
    var competiciones = await _ligamaniaService.GetCompeticionesActivas();
    var equipos = ViewBag.Equipos;

    var aliPreviasPorcategoria = new Dictionary<string, List<AlineacionCompeticionJornadaViewModel>>();
    var aliCambiosPorcategoria = new Dictionary<string, List<AlineacionCompeticionJornadaViewModel>>();
    var aliActualPorcategoria =  new Dictionary<string, List<AlineacionCompeticionJornadaViewModel>>();

    var listaCategorias = new List<string>();
    if (Model != null)
    {
        aliPreviasPorcategoria = Model.AlineacionesPrevias.GroupBy(ap => ap.OrdenCategoria+"-"+ap.Categoria )
            .ToDictionary(grp => grp.Key, grp => grp.ToList());
        aliCambiosPorcategoria = Model.AlineacionesCambios.GroupBy(ap => ap.OrdenCategoria+"-"+ap.Categoria).ToDictionary(grp => grp.Key, grp => grp.ToList());
        aliActualPorcategoria = Model.AlineacionesActual.GroupBy(ap => ap.OrdenCategoria+"-"+ap.Categoria).ToDictionary(grp => grp.Key, grp => grp.ToList());

        listaCategorias = Model.AlineacionesCambios.GroupBy(ap => ap.OrdenCategoria).Select(grp => grp.Key+"-"+ grp.FirstOrDefault().Categoria).ToList();
        listaCategorias = listaCategorias.OrderBy(c => c).ToList();
    }
}
<div class="flex-container">
    <div class="card">
        <div class="card-header">
            <div class="d-flex flex-row border-dark">
                <div class="p-2 ">
                    <h3>Revisar que todos los jugadores alineados tengan el club correcto</h3>
                    <button class="btn btn-primary" id="revisarClub">Revisar Clubs</button>
                </div>
            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-header">
            <div class="d-flex flex-row border-dark">
                <h3>Seleccionar competición para ver todas las alineaciones en la jornada previa y en la jornada en curso</h3>
                <div class="p-2 ">
                    <label for="competicion-name">Seleccionar Competición</label>
                    @Html.DropDownList("competicion", competiciones, "Seleccionar...", new { @class = "custom-select", required = "required", @onchange = "CompeticionChange(this.value)" })
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (Model != null)
            {
                <div class="card-title">Alineaciones de @Model.Competicion</div>
                var competicion = Model.Competicion;
                foreach (var categoria in listaCategorias)
                {
                    if (aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && aliActualPorcategoria.ContainsKey(categoria))
                    {
                        @await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",aliPreviasPorcategoria[categoria]}, {"cambios",aliCambiosPorcategoria[categoria]},
                            {"actual",aliActualPorcategoria[categoria]} })
                    }
                    else if (aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && !aliActualPorcategoria.ContainsKey(categoria))
                    {
                        @await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",aliPreviasPorcategoria[categoria]}, {"cambios",aliCambiosPorcategoria[categoria]},
                            {"actual",null} })
                    }
                    else if (!aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && !aliActualPorcategoria.ContainsKey(categoria))
                    {
                        @await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",null}, {"cambios",aliCambiosPorcategoria[categoria]},{"actual",null} })
                    }
                    else if (!aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && aliActualPorcategoria.ContainsKey(categoria))
                    {
                        @await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",null}, {"cambios",aliCambiosPorcategoria[categoria]},{"actual",aliActualPorcategoria[categoria]} })
                    }
                }
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    $('#revisarClub').on('click', function (event) {
        var r = confirm("Se van a comparar los clubs de los jugadores alineados con los clubs de los jugadores activos. ¿Continuar?");
        if (r == true) {
            var urlToCall = '/Herramientas/RevisarClubAlineaciones';
            $.ajax({
                type: "POST",
                url: urlToCall,
                contentType: "application/json; charset=utf-8",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert("Error al revisar clubs" + categoria);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(response.message);
                }
            });
        }
    });
    function CompeticionChange(competicion) {
        var r = true;
        if (r == true) {
            var urlToCall = '/Herramientas/Alineaciones?competicion=' + competicion;
            window.location.href = urlToCall;
            //$.ajax({
            //    type: "POST",
            //    url: urlToCall,
            //    contentType: "application/json; charset=utf-8",
            //    processData: true,
            //    cache: false,
            //    dataType: 'json',
            //    error: function () {
            //        alert("Error al cargar alineaciones de " + competicion);
            //    }
            //}).done(function (response) {
            //    if (response.result) {
            //        alert(response.message);
            //        location.reload();
            //    }
            //    else {
            //        alert(response.message);
            //    }   
            //});
        }
    };

</script>
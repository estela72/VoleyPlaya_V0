@inject ILigamaniaService _ligamaniaService
@using LigamaniaCoreApp.Models.HerramientasViewModels
@model IEnumerable<JugadorRepositoryViewModel>

@{
    Layout = "_LayoutSimple";
    ViewData["Title"] = "Jugadores";
    var jugadores = Model.OrderBy(j => j.Jugador).ThenByDescending(j => j.Temporada).ToList();
}
<div class="flex-container">
    <div class="panel">
        <div class="panel-title">
            <div class="card-title">Repositorio de Jugadores</div>
            <div class="btn-group" role="group" aria-label="Toolbar with button groups">
                <button type="button" onclick="downloadBlob()">Ajax Download</button>
                <button type="button" class="btn btn-primary mr-3" onclick="exportToExcel()">Exportar a Excel</button>
                <button type="button" class="btn btn-primary mr-3" id="loadExcelFile" disabled>Cargar excel con jugadores</button>
                <button type="button" class="btn btn-primary mr-3" id="updateJugadores" disabled>Actualizar tabla de Jugadores</button>
            </div>
        </div>
        <div class="panel-body">
            @(Html.Grid(jugadores)
                .Build(columns =>
                {
                    columns.Add(model => model.Id).Titled("Id Jugador");
                    columns.Add(model => model.Jugador).Titled("Jugador");
                    columns.Add(model => model.Activo).Titled("Activo");
                    columns.Add(model => model.IdTemporada).Titled("Id Jugador temporada");
                    columns.Add(model => model.Temporada).Titled("Temporada");
                    columns.Add(model => model.Club).Titled("Club");
                    columns.Add(model => model.Puesto).Titled("Puesto");
                    columns.Add(model => model.ActivoTemporada).Titled("Activo temporada");
                    columns.Add(model => model.FechaTemporada).Titled("Fecha alta jugador");
                    columns.Add(model => model.FechaTemporada).Titled("Fecha temporada");
                    columns.Add(model => model.UsadoEnAlineaciones).Titled("Nº Alineaciones");
                    columns.Add(model => model.UsadoEnJornadas).Titled("Nº intervenciones en Jornadas");
                })
                .Css("webgrid-jugadores") // Overwrites all classes with the new ones
                .Empty("No hay jugadores")
                .Id("ajax-grid-jugadores")
            )
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">
        function exportToExcel() {
            var url = '/Herramientas/SaveJugadoresInExcelFile'
            let response = fetch(url);
        }
    //function downloadBlob()
    //{
    //   fetch('/ExcelExample/InMemoryReport')
	   //  .then(function(response) {
	   //      return response.blob();
	   //  })
	   //  .then(function(xlsxBlob) {
    //         var a = document.createElement("a");
    //         document.body.appendChild(a);
    //         a.style = "display: none";
    //         let url = window.URL.createObjectURL(xlsxBlob);
    //         a.href = url;
    //         a.download = "report.xlsx";
    //         a.click();
    //         window.URL.revokeObjectURL(url);
	   //  });
    //}
    </script>
}

#pragma checksum "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "55304265b43a521874dc69fa0d341f1663a9a989"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ManagerC_Entrenadores), @"mvc.1.0.view", @"/Views/ManagerC/Entrenadores.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/ManagerC/Entrenadores.cshtml", typeof(AspNetCore.Views_ManagerC_Entrenadores))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 3 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp;

#line default
#line hidden
#line 4 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models;

#line default
#line hidden
#line 6 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models.ManageViewModels;

#line default
#line hidden
#line 7 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Data.DataModels.Base.Ligamania.Model;

#line default
#line hidden
#line 8 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Services;

#line default
#line hidden
#line 11 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using NonFactors.Mvc.Grid;

#line default
#line hidden
#line 1 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
using LigamaniaCoreApp.Models.AccountViewModels;

#line default
#line hidden
#line 2 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
using LigamaniaCoreApp.Models.ManagerViewModels;

#line default
#line hidden
#line 3 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
using LigamaniaCoreApp.Data;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"55304265b43a521874dc69fa0d341f1663a9a989", @"/Views/ManagerC/Entrenadores.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1653bea22581b35930f70d9de4acba1f76fe3e61", @"/Views/_ViewImports.cshtml")]
    public class Views_ManagerC_Entrenadores : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<EntrenadorEquipoViewModel>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(167, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 6 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
  
    ViewData["Title"] = "Entrenadores";
    var entrenadores = Model.Entrenadores;
    var equipos = Model.Equipos.OrderBy(e => e.Equipo).ToList();
    var listaSiNo = new SelectList(new List<string> { LigamaniaEnum.eSINO.SI.ToString(), LigamaniaEnum.eSINO.NO.ToString() });
    var inventarioUsuarios = Model.InventarioEntrenadores.OrderBy(u => u.UserName).ToList();
    ;

#line default
#line hidden
            BeginContext(556, 197, true);
            WriteLiteral("\r\n<h2 class=\"text-center\">Entrenadores activos en Ligamanía</h2>\r\n<div class=\"row\">\r\n    <div id=\"grid-entrenadores\" class=\"mvc-grid\" data-name=\"\" data-filter-mode=\"FilterRow\" data-source-url=\"\">\r\n");
            EndContext();
            BeginContext(779, 1969, false);
#line 19 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
        Write(Html
                    .Grid(entrenadores)
                    .Build(columns =>
                    {
                        columns.Add(model => model.Equipo).Titled("Equipo");
                        columns.Add(model => model.UserName).Titled("Entrenador");
                        columns.Add(model => model.Email).Titled("Email");
                        columns.Add(model => model.PhoneNumber).Titled("Nº teléfono");
                        columns.Add(model => model.CategoriaPreferida).Titled("Categoría preferida");
                        columns.Add(model => model.City).Titled("Ciudad");
                        columns.Add(model => model.Conocimiento).Titled("Como conoció Ligamanía");
                        columns.Add(model => model.Whatsapp ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("Recibir whatsapp");
                        columns.Add(model => model.EsBot ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("Es BOT");
                        columns.Add(model => $"<button type='button' class='btn btn-primary' data-equipo=\"{model.Equipo}\" data-entrenador=\"{model.UserName}\" data-email=\"{model.Email}\" " +
                            $"data-telefono=\"{model.PhoneNumber}\" data-esbot=\"{model.EsBot}\" data-id=\"{model.EquipoId}\" " +
                            $"data-toggle='modal' data-target='#editMenuModal'>Editar</button>").Encoded(false);
                    })
                    .Css("webgrid-noticiaAplicacion") // Overwrites all classes with the new ones
                    .Empty("No hay entrenadores")
                    .WithFilterMode(GridFilterMode.FilterRow)
                    .Id("ajax-grid-entrenadores")
                    .Pageable(pager =>
                    {
                        pager.RowsPerPage = 15;
                    })
                    .Filterable()
                    .Sortable()
            );

#line default
#line hidden
            EndContext();
            BeginContext(2762, 249, true);
            WriteLiteral("    </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div class=\"card\">\r\n        <h2 class=\"text-center\">Inventario de Equipos de Ligamanía</h2>\r\n        <div id=\"grid-equipos\" class=\"mvc-grid\" data-name=\"\" data-filter-mode=\"FilterRow\" data-source-url=\"\">\r\n");
            EndContext();
            BeginContext(3045, 1793, false);
#line 56 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
            Write(Html
                        .Grid(equipos)
                        .Build(columns =>
                        {
                            columns.Add(model => model.Equipo).Titled("Equipo");
                            columns.Add(model => model.Entrenador).Titled("Entrenador");
                            columns.Add(model => model.Baja ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("Baja");
                            columns.Add(model => model.EsBOT? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("BOT");
                            columns.Add(model => model.Baja ? $"<button type='button' class='btn btn-primary' onclick='activarEquipo(\"{model.Equipo}\")'>Activar</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='desactivarEquipo(\"{model.Equipo}\")'>Desactivar</button>").Encoded(false);
                            columns.Add(model => model.EsBOT ? $"<button type='button' class='btn btn-primary' onclick='equipoNoBot(\"{model.Equipo}\")'>No es BOT</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='equipoBot(\"{model.Equipo}\")'>Es BOT</button>").Encoded(false);
                        })
                        .Css("webgrid-noticiaAplicacion") // Overwrites all classes with the new ones
                        .Empty("No hay equipos")
                        .WithFilterMode(GridFilterMode.FilterRow)
                        .Id("ajax-grid-equipos")
                        .Pageable(pager =>
                        {
                            pager.RowsPerPage = 15;
                        })
                        .Filterable()
                        .Sortable()
                );

#line default
#line hidden
            EndContext();
            BeginContext(4856, 238, true);
            WriteLiteral("        </div>\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n        <h2 class=\"text-center\">Inventario de Usuarios de Ligamanía</h2>\r\n        <div id=\"grid-invent\" class=\"mvc-grid\" data-name=\"\" data-filter-mode=\"FilterRow\" data-source-url=\"\">\r\n");
            EndContext();
            BeginContext(5128, 2903, false);
#line 88 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
            Write(Html
                    .Grid(inventarioUsuarios)
                    .Build(columns =>
                    {
                        columns.Add(model => model.UserName).Titled("Entrenador");
                        columns.Add(model => model.Email).Titled("Email");
                        columns.Add(model => model.Equipo).Titled("Equipo");
                        columns.Add(model => model.EstadoUsuario).Titled("Estado");
                        columns.Add(model => model.EsEntrenador ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("¿Es Entrenador?");
                        columns.Add(model => model.EsBot ? LigamaniaEnum.eSINO.SI.ToString() : LigamaniaEnum.eSINO.NO.ToString()).Titled("¿Es BOT?");
                        columns.Add(model => model.StringRoles).Titled("Roles");

                        columns.Add(model => $"<button type='button' class='btn btn-primary' onclick='confirmarEntrenador(\"{model.UserName}\")'>Confirmar</button>").Encoded(false).Titled("Confirmar");
                        columns.Add(model => $"<button type='button' class='btn btn-primary' onclick='bajaEntrenador(\"{model.UserName}\")'>Baja</button>").Encoded(false).Titled("Baja");
                        columns.Add(model => $"<button type='button' class='btn btn-primary' onclick='registrarEntrenador(\"{model.UserName}\")'>Registrar</button>").Encoded(false).Titled("Registrar");

                        columns.Add(model => model.EsEntrenador ? $"<button type='button' class='btn btn-primary' onclick='eliminarComoEntrenador(\"{model.UserName}\")'>No es entrenador</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='esEntrenador(\"{model.UserName}\")'>Es entrenador</button>").Encoded(false).Titled("Entrenador");
                        columns.Add(model => model.EsBot ? $"<button type='button' class='btn btn-primary' onclick='noEsBot(\"{model.UserName}\")'>No es BOT</button>" :
                            $"<button type='button' class='btn btn-primary' onclick='esBot(\"{model.UserName}\")'>Es BOT</button>").Encoded(false).Titled("Bot");

                        columns.Add(model => $"<button type='button' class='btn btn-primary' data-usuario=\"{model.UserName}\"  data-roles=\"{model.StringRoles}\"" +
                            $"data-toggle='modal' data-target='#editRolesModal'>Modificar Roles</button>").Encoded(false);

                    })
                .Css("webgrid-noticiaAplicacion") // Overwrites all classes with the new ones
                .Empty("No hay equipos")
                .WithFilterMode(GridFilterMode.FilterRow)
                .Id("ajax-grid-equipos")
                .Pageable(pager =>
                {
                    pager.RowsPerPage = 15;
                })
                .Filterable()
                .Sortable()
                );

#line default
#line hidden
            EndContext();
            BeginContext(8049, 631, true);
            WriteLiteral(@"        </div>
    </div>
</div>

<div class=""modal fade"" id=""editMenuModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""editMenuModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""editMenuModalLabel"">Editando... </h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(8680, 1749, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "55304265b43a521874dc69fa0d341f1663a9a98914632", async() => {
                BeginContext(8686, 1567, true);
                WriteLiteral(@"
                    <input type=""hidden"" class=""form-control"" id=""edit-equipoId"">
                    <div class=""form-group"">
                        <label for=""edit-equipo-text"" class=""col-form-label"">Equipo:</label>
                        <input type=""text"" class=""form-control"" id=""edit-equipo-text"" disabled>
                    </div>
                    <div class=""form-group"">
                        <label for=""edit-equipoNuevo-text"" class=""col-form-label"">Nuevo nombre de Equipo:</label>
                        <input type=""text"" class=""form-control"" id=""edit-equipoNuevo-text"">
                    </div>
                    <div class=""form-group"">
                        <label for=""edit-entrenador-text"" class=""col-form-label"">Entrenador:</label>
                        <input type=""text"" class=""form-control"" id=""edit-entrenador-text"">
                    </div>
                    <div class=""form-group"">
                        <label for=""edit-email-text"" class=""col-form-label"">Em");
                WriteLiteral(@"ail:</label>
                        <input type=""text"" class=""form-control"" id=""edit-email-text"">
                    </div>
                    <div class=""form-group"">
                        <label for=""edit-telefono-text"" class=""col-form-label"">Teléfono:</label>
                        <input type=""text"" class=""form-control"" id=""edit-telefono-text"">
                    </div>
                    <div class=""form-group"">
                        <label for=""edit-esbot-text"">¿Es un equipo BOT?:</label>
                        ");
                EndContext();
                BeginContext(10254, 122, false);
#line 163 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
                   Write(Html.DropDownList("edit-esbot-text", listaSiNo, "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(10376, 46, true);
                WriteLiteral("\r\n                    </div>\r\n                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(10429, 921, true);
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"" data-save=""modal-edit"">Guardar</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<div class=""modal fade"" id=""editRolesModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""editRolesModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""editRolesModalLabel"">Editando... </h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(11350, 900, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "55304265b43a521874dc69fa0d341f1663a9a98919262", async() => {
                BeginContext(11356, 686, true);
                WriteLiteral(@"
                    <div class=""form-group"">
                        <label for=""edit-usuario-text"" class=""col-form-label"">Usuario:</label>
                        <input type=""text"" class=""form-control"" id=""edit-usuario-text"" disabled>
                    </div>
                    <div class=""form-group"">
                        <label for=""edit-roles-text"">Roles:</label>
                        <input type=""text"" class=""form-control"" id=""edit-roles-text"" disabled>
                    </div>
                    <div class=""form-group"">
                        <label for=""edit-listroles-text"">Seleccionar rol para agregar o eliminar:</label>
                        ");
                EndContext();
                BeginContext(12043, 152, false);
#line 196 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ManagerC\Entrenadores.cshtml"
                   Write(Html.DropDownList("edit-listroles-text", new SelectList(Model.ExistingRoles), "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(12195, 48, true);
                WriteLiteral("\r\n                    </div>\r\n\r\n                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12250, 19041, true);
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"" data-save=""modal-add-role"">Agregar rol</button>
                <button type=""button"" class=""btn btn-primary"" data-save=""modal-remove-role"">Eliminar rol</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cerrar</button>
            </div>
        </div>
    </div>
</div>



<script type=""text/javascript"">
    $('#editMenuModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal
        var id = button.data('id') // Extract info from data-* attributes
        var equipo = button.data('equipo')
        var entrenador = button.data('entrenador')
        var email = button.data('email')
        var telefono = button.data('telefono')
        var esbot = button.data('esbot')
        var bot = ""SI"";
        if (!esbot) bot = ""NO"";
        // If necessary, you could");
            WriteLiteral(@" initiate an AJAX request here (and then do the updating in a callback).
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
        var modal = $(this)
        modal.find('.modal-title').text('Edición de equipo ' + equipo)
        modal.find('#edit-equipoId').val(id)
        modal.find('#edit-equipo-text').val(equipo)
        modal.find('#edit-equipoNuevo-text').val(equipo)
        modal.find('#edit-entrenador-text').val(entrenador)
        modal.find('#edit-email-text').val(email)
        modal.find('#edit-telefono-text').val(telefono)
        modal.find('#edit-esbot-text').val(bot)
    })

    $('#editMenuModal').on('click', '[data-save=""modal-edit""]', function (event) {
        event.preventDefault();
        var id = $('#edit-equipoId').val();
        var equipo = $('#edit-equipo-text').val();
        var equipoNuevo = $('#edit-equipoNuevo-text').val();
        var entrenador = $('#edit-entrenador-text').val();");
            WriteLiteral(@"
        var email = $('#edit-email-text').val();
        var telefono = $('#edit-telefono-text').val();
        var esbot = $('#edit-esbot-text').val();
        var bot = true;
        if (esbot === ""NO"") bot = false;
        const equipoInfo = {
            EquipoId: id,
            Equipo: equipo,
            EquipoNuevo: equipoNuevo,
            UserName: entrenador,
            Email: email,
            PhoneNumber: telefono,
            EsBot: bot
        };
        var urlToCall = '/MANAGERC/EditarEquipo';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(equipoInfo),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al modificar equipo"");
            }
        }).done(function (response) {
            alert(response.message);
            if (response.resul");
            WriteLiteral(@"t) {
                $('#editMenuModal').modal('hide');
                location.reload();
            }
        });
    });

    $('#editRolesModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal
        var user = button.data('usuario')
        var userRoles = button.data('roles')
        // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
        var modal = $(this)
        modal.find('.modal-title').text('Modificar roles del usuario ' + user)
        modal.find('#edit-usuario-text').val(user)
        modal.find('#edit-roles-text').val(userRoles)
    })

    $('#editRolesModal').on('click', '[data-save=""modal-add-role""]', function (event) {
        event.preventDefault();
        var user = $('#edit-usuario-text').val();
        var rolSelec");
            WriteLiteral(@"ted = $('#edit-listroles-text').val();

        alert('Add role ' + rolSelected + ' to user ' + user);

        const equipoInfo = {
            //EquipoId: id,
            //Equipo: equipo,
            //EquipoNuevo: equipoNuevo,
            UserName: user,
            //Email: email,
            //PhoneNumber: telefono,
            //EsBot: bot
            NewRole: rolSelected
        };
        var urlToCall = '/MANAGERC/AddRoleToUser';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(equipoInfo),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al agregar un rol"");
            }
        }).done(function (response) {
            alert(response.message);
            if (response.result) {
                $('#editRolesModal').modal('hide');
                loc");
            WriteLiteral(@"ation.reload();
            }
        });
    });

    $('#editRolesModal').on('click', '[data-save=""modal-remove-role""]', function (event) {
        event.preventDefault();
        var user = $('#edit-usuario-text').val();
        var rolSelected = $('#edit-listroles-text').val();

        alert('Remove role ' + rolSelected + ' from user ' + user);

        const equipoInfo = {
            //EquipoId: id,
            //Equipo: equipo,
            //EquipoNuevo: equipoNuevo,
            UserName: user,
            //Email: email,
            //PhoneNumber: telefono,
            //EsBot: bot
            NewRole: rolSelected
        };
        var urlToCall = '/MANAGERC/RemoveRoleFromUser';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(equipoInfo),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (re");
            WriteLiteral(@"sponse) {
                alert(""Error al eliminar un rol"");
            }
        }).done(function (response) {
            alert(response.message);
            if (response.result) {
                $('#editRolesModal').modal('hide');
                location.reload();
            }
        });

    });


    function activarEquipo(equipo) {
        var r = confirm(""¿Está seguro de querer activar el equipo: "" + equipo + ""?"");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: true
            };
            var urlToCall = '/MANAGERC/ActivarDesactivarEquipo';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    ale");
            WriteLiteral(@"rt(""Error al activar el equipo "" + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al activar el equipo "" + equipo);
                }
            });
        }
    };

    function desactivarEquipo(equipo) {
        var r = confirm(""¿Está seguro de querer desactivar el equipo: "" + equipo + ""?"");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: false
            };
            var urlToCall = '/MANAGERC/ActivarDesactivarEquipo';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
           ");
            WriteLiteral(@"     dataType: 'json',
                error: function () {
                    alert(""Error al desactivar el equipo "" + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al desactivar el equipo "" + equipo);
                }
            });
        }
    };

    function equipoNoBot(equipo) {
        var r = confirm(""¿Está seguro que no es BOT el equipo: "" + equipo + ""?"");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: false
            };
            var urlToCall = '/MANAGERC/BotNoBotEquipo';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
        ");
            WriteLiteral(@"        processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al activar el equipo "" + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al activar el equipo "" + equipo);
                }
            });
        }
    };

    function equipoBot(equipo) {
        var r = confirm(""¿Está seguro de que es BOT el equipo: "" + equipo + ""?"");
        if (r == true) {
            const equipoActivar = {
                Equipo: equipo,
                Accion: true
            };
            var urlToCall = '/MANAGERC/BotNoBotEquipo';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(equipoActivar),
                url: urlToCall,
            ");
            WriteLiteral(@"    contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al desactivar el equipo "" + equipo);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al desactivar el equipo "" + equipo);
                }
            });
        }
    };

    function eliminarComoEntrenador(usuario) {
        var r = confirm(""¿Está seguro de querer marcar el usuario: "" + usuario + "" como NO entrenador?"");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: usuario,
                Accion: ""noEsEntrenador""
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({");
            WriteLiteral(@"
                type: ""POST"",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al marcar el usuario "" + usuario + "" como NO entrenador"");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al marcar el usuario "" + usuario + "" como NO entrenador"");
                }
            });
        }
    };

    function esEntrenador(usuario) {
        var r = confirm(""¿Está seguro de querer marcar el usuario: "" + usuario + "" como entrenador?"");
        if (r == true) {
            const accionEntrenador = {
              ");
            WriteLiteral(@"  Entrenador: usuario,
                Accion: ""esEntrenador""
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al marcar el usuario "" + usuario + "" como entrenador"");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al marcar el usuario "" + usuario + "" como entrenador"");
                }
            });
        }
    };

    function noEsBot(usuario) {
        var r = confirm(""¿Está ");
            WriteLiteral(@"seguro de querer marcar el usuario: "" + usuario + "" como NO BOT?"");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: usuario,
                Accion: ""noEsBot""
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al marcar el usuario "" + usuario + "" como NO BOT"");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al marcar el usuario "" + usuario + "" c");
            WriteLiteral(@"omo NO BOT"");
                }
            });
        }
    };

    function esBot(usuario) {
        var r = confirm(""¿Está seguro de querer marcar el usuario: "" + usuario + "" como BOT?"");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: usuario,
                Accion: ""esBot""
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al marcar el usuario "" + usuario + "" como BOT"");
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location");
            WriteLiteral(@".reload();
                }
                else {
                    alert(""Error al marcar el usuario "" + usuario + "" como BOT"");
                }
            });
        }
    };

    function confirmarEntrenador(entrenador) {
        var r = confirm(""¿Está seguro de querer confirmar el entrenador: "" + entrenador + ""?"");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: entrenador,
                Accion: ""confirmar""
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al confirmar el entrenador "" + entrenador);
                }
            }).");
            WriteLiteral(@"done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al confirmar el entrenador "" + entrenador);
                }
            });
        }
    };

    function bajaEntrenador(entrenador) {
        var r = confirm(""¿Está seguro de querer dar de baja el entrenador: "" + entrenador + ""?"");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: entrenador,
                Accion: ""baja""
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error");
            WriteLiteral(@": function () {
                    alert(""Error al dar de baja el entrenador "" + entrenador);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al dar de baja el entrenador "" + entrenador);
                }
            });
        }
    };
    function registrarEntrenador(entrenador) {
        var r = confirm(""¿Está seguro de querer registrar el entrenador: "" + entrenador + ""?"");
        if (r == true) {
            const accionEntrenador = {
                Entrenador: entrenador,
                Accion: ""registrar""
            };
            var urlToCall = '/MANAGERC/AccionSobreEntrenador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(accionEntrenador),
                url: urlToCall,
                contentType: ""application/json; c");
            WriteLiteral(@"harset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al registrar el entrenador "" + entrenador);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(""Error al registrar el entrenador "" + entrenador);
                }
            });
        }
    };

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EntrenadorEquipoViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591

#pragma checksum "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c1353b6113120d658b79b8daa7c6148a8f7fafe0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ManagerC_CierreTemporada), @"mvc.1.0.view", @"/Views/ManagerC/CierreTemporada.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/ManagerC/CierreTemporada.cshtml", typeof(AspNetCore.Views_ManagerC_CierreTemporada))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 3 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp;

#line default
#line hidden
#line 4 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models;

#line default
#line hidden
#line 5 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models.AccountViewModels;

#line default
#line hidden
#line 6 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models.ManageViewModels;

#line default
#line hidden
#line 7 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Data.DataModels.Base.Ligamania.Model;

#line default
#line hidden
#line 8 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Services;

#line default
#line hidden
#line 9 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Data;

#line default
#line hidden
#line 11 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using NonFactors.Mvc.Grid;

#line default
#line hidden
#line 1 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
using LigamaniaCoreApp.Models.ManagerViewModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c1353b6113120d658b79b8daa7c6148a8f7fafe0", @"/Views/ManagerC/CierreTemporada.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1653bea22581b35930f70d9de4acba1f76fe3e61", @"/Views/_ViewImports.cshtml")]
    public class Views_ManagerC_CierreTemporada : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<InfoPreparacionTemporadaViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(51, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
  
    ViewData["Title"] = "Cierre de Temporada Actual";
    var temporada = "sin establecer";
    ICollection<TemporadaCompeticionViewModel> competiciones = new List<TemporadaCompeticionViewModel>();
    string estadoActual = "sin establecer";
    int temporadaActualId = 0;
    if (Model.Actual != null)
    {
        temporada = Model.Actual.Temporada;
        temporadaActualId = Model.Actual.Id;
        competiciones = Model.Actual.Competiciones.ToList();
        estadoActual = Model.Actual.EstadoTemporada.ToString();
    }
    var pretemporada = "sin establecer";
    ICollection<TemporadaCompeticionViewModel> competicionesPretemporada = new List<TemporadaCompeticionViewModel>();
    string estadoPretemporada = "sin establecer";
    int pretemporadaId = 0;
    if (Model.Pretemporada != null)
    {
        pretemporada = Model.Pretemporada.Temporada;
        pretemporadaId = Model.Pretemporada.Id;
        competicionesPretemporada = Model.Pretemporada.Competiciones.ToList();
        estadoPretemporada = Model.Pretemporada.EstadoTemporada.ToString();
    }

#line default
#line hidden
            BeginContext(1195, 196, true);
            WriteLiteral("    <div class=\"p-5\">\r\n        <div class=\"flex-item-bold-center card\">\r\n            <div class=\"card-header\" style=\"background-color:lightgoldenrodyellow\">\r\n                <h2>Temporada Actual: ");
            EndContext();
            BeginContext(1392, 9, false);
#line 32 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                                 Write(temporada);

#line default
#line hidden
            EndContext();
            BeginContext(1401, 11, true);
            WriteLiteral(" - Estado: ");
            EndContext();
            BeginContext(1413, 12, false);
#line 32 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                                                      Write(estadoActual);

#line default
#line hidden
            EndContext();
            BeginContext(1425, 282, true);
            WriteLiteral(@"</h2>
            </div>
            <div class=""card-body"">
                <h3 class=""text-center"">Competiciones</h3>
                <div id=""grid-competiciones"" class=""mvc-grid col-offset-1"" data-name="""" data-filter-mode=""FilterRow"" data-source-url="""">
                    ");
            EndContext();
            BeginContext(1709, 794, false);
#line 37 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                Write(Html
                        .Grid(competiciones)
                        .Build(columns =>
                        {
                            columns.Add(model => model.Competicion).Titled("Competición");
                            columns.Add(model => model.EstadoCompeticion).Titled("Estado");
                            columns.Add(model => !model.EstadoCompeticion.Equals("Finalizada") ? $"<button class='btn-primary'  id=\"{model.Id}\" onClick=\"buttonFinalizarCompeticionClicked(this.id)\">Finalizar</button>" : " ").Encoded(false);
                        })
                        .Empty("No hay competiciones")
                        .Id("competiciones")
                        .Css("mvc-grid-large") // Overwrites all classes with the new ones
                    );

#line default
#line hidden
            EndContext();
            BeginContext(2504, 188, true);
            WriteLiteral("\r\n                </div>\r\n            </div>\r\n            <div class=\"card-footer\">\r\n                <div class=\"btn-toolbar mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n");
            EndContext();
#line 53 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                     if (Model.Actual != null && Model.Actual.EstadoTemporada.ToString().Equals("Cerrada"))
                    {

#line default
#line hidden
            BeginContext(2824, 122, true);
            WriteLiteral("                        <button class=\"btn-secondary\" id=\"button-finalizar-temporada\" disabled>Cerrar Temporada</button>\r\n");
            EndContext();
#line 56 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                    }
                    else if (Model.Actual != null)
                    {

#line default
#line hidden
            BeginContext(3044, 114, true);
            WriteLiteral("                        <button class=\"btn-primary\" id=\"button-finalizar-temporada\">Finalizar Temporada</button>\r\n");
            EndContext();
#line 60 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                    }

#line default
#line hidden
#line 61 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                     if (Model.Actual != null)
                    {

#line default
#line hidden
            BeginContext(3252, 280, true);
            WriteLiteral(@"                        <button class=""btn-primary offset-1"" style=""padding:10px"" id=""button-limpiar-basedatos"">Limpiar base de datos</button>
                        <button class=""btn-primary offset-1"" style=""padding:10px"" id=""button-no-actual"">Convertir a histórica</button>
");
            EndContext();
#line 65 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                    }

#line default
#line hidden
            BeginContext(3555, 85, true);
            WriteLiteral("                </div>\r\n            </div>\r\n        </div>\r\n        <hr />\r\n       \r\n");
            EndContext();
#line 71 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
         if (Model.Pretemporada != null && pretemporada != temporada)
        {

#line default
#line hidden
            BeginContext(3722, 167, true);
            WriteLiteral("            <div class=\"flex-item-bold-center card\">\r\n                <div class=\"card-header\" style=\"background-color:lightblue\">\r\n                    <h2>Temporada: ");
            EndContext();
            BeginContext(3890, 28, false);
#line 75 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                              Write(Model.Pretemporada.Temporada);

#line default
#line hidden
            EndContext();
            BeginContext(3918, 3, true);
            WriteLiteral(" - ");
            EndContext();
            BeginContext(3922, 34, false);
#line 75 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                                                              Write(Model.Pretemporada.EstadoTemporada);

#line default
#line hidden
            EndContext();
            BeginContext(3956, 289, true);
            WriteLiteral(@"</h2>
                </div>
                <div class=""card-body"">
                    <h3 class=""text-center"">Competiciones</h3>
                    <div id=""grid-competiciones"" class=""mvc-grid"" data-name="""" data-filter-mode=""FilterRow"" data-source-url="""">
                        ");
            EndContext();
            BeginContext(4247, 976, false);
#line 80 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                    Write(Html
                            .Grid(Model.Pretemporada.Competiciones)
                            .Build(columns =>
                            {
                                //columns.Add(model => !model.EstadoCompeticion.Equals("Finalizada") ? $"<button class='btn-primary'  id=\"{model.Id}\" onClick=\"buttonFinalizarCompeticionClicked(this.id)\">Finalizar</button>" : " ").Encoded(false);
                                columns.Add(model => model.Competicion).Titled("Competición");
                                columns.Add(model => model.EstadoCompeticion).Titled("Estado");
                            })
                            .Empty("No hay competiciones creadas")
                            .Id("competiciones-pretemmporada")
                            .Css("mvc-grid-xlarge") // Overwrites all classes with the new ones
                            .AppendCss("table-hover") // Appends classes to the current ones
                        );

#line default
#line hidden
            EndContext();
            BeginContext(5224, 54, true);
            WriteLiteral("\r\n                    </div>\r\n                </div>\r\n");
            EndContext();
#line 95 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
                 if (!Model.Pretemporada.Competiciones.Any())
                {

#line default
#line hidden
            BeginContext(5360, 2131, true);
            WriteLiteral(@"                <div class=""card-footer"">
                    <h3>Copiar competición Liga y equipos desde la última temporada</h3>
                    <div class=""btn-group p-2"" role=""group"" aria-label=""Toolbar with button groups"">
                        <button type=""button"" class=""btn btn-primary mr-2"" id=""btnAgregarLiga"" value=""Submit"">Agregar competición Liga y equipos</button>
                        <button type=""button"" class=""btn btn-primary"" id=""btnTemporadaActual"">Convertir Pretemporada a Temporada Actual</button>
                    </div>
                    <p style=""color:lightcoral"">Convertir Pretemporada a Temporada Actual se debe hacer una vez que ya se tengan preparados los equipos y se esté seguro que no se quiere volver a la temporada anterior</p>
                </div>
                    <script type=""text/javascript"">
                        var agregarLiga = document.getElementById(""btnAgregarLiga"");
                        agregarLiga.addEventListener(""click"", buttonAgregar");
            WriteLiteral(@"LigaPretemporada);

                        function buttonAgregarLigaPretemporada() {
                            var urlToCall = '/MANAGERC/AgregarLigaPretemporada';
                            $.ajax({
                                type: ""POST"",
                                url: urlToCall,
                                contentType: ""application/json; charset=utf-8"",
                                processData: true,
                                cache: false,
                                async: false,
                                dataType: 'json',
                                error: function (response) {
                                    alert(""Error al agregar la Liga"");
                                }
                            }).done(function (response) {
                                alert(response.message);
                                if (alert.result) {
                                    location.reload();
                                }
          ");
            WriteLiteral("                  });\r\n\r\n                        }\r\n                    </script>\r\n");
            EndContext();
#line 131 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"

                }
                else
                {

#line default
#line hidden
            BeginContext(7553, 306, true);
            WriteLiteral(@"                    <div class=""card-footer"">
                        <div class=""col-md-offset-1 form-inline"">
                            <button class=""btn btn-primary offset-1"" id=""btnTemporadaActual"">Convertir a Temporada Actual</button>
                        </div>
                    </div>
");
            EndContext();
#line 140 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"

                }

#line default
#line hidden
            BeginContext(7880, 20, true);
            WriteLiteral("            </div>\r\n");
            EndContext();
#line 143 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
        }
        else
        {

#line default
#line hidden
            BeginContext(7936, 710, true);
            WriteLiteral(@"            <div class=""flex-item-bold-center card"">
                <div class=""card-header p-2"">
                    <h3>Crear nueva TEMPORADA</h3>
                </div>
                <div class=""card-body"">
                    <div class=""input-group-mb3"">
                        <span class=""input-group-text"" id=""basic-addon1"">Introducir temporada (aaaa-aaaa):</span>
                        <input type=""text"" class=""form-control"" id=""nuevaTemporada"">
                    </div>
                </div>
                <div class=""card-footer"">
                    <button class=""btn btn-primary"" id=""btnCrearTemporada"">Crear temporada</button>
                </div>
            </div>
");
            EndContext();
#line 160 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
        }

#line default
#line hidden
            BeginContext(8657, 344, true);
            WriteLiteral(@"    </div>
<style>
    .css-classes {
        font-size: large;
    }
</style>

<script type=""text/javascript"">
    var noActual = document.getElementById(""button-no-actual"");
    noActual.addEventListener(""click"", buttonConvertirAHistorica);

    function buttonConvertirAHistorica() {
        const temporada = {
            Id: ");
            EndContext();
            BeginContext(9002, 17, false);
#line 174 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
           Write(temporadaActualId);

#line default
#line hidden
            EndContext();
            BeginContext(9019, 2624, true);
            WriteLiteral(@"
        };

        var urlToCall = '/MANAGERC/ConvertirAHistorica';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            async: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al convertir temporada a histórica"");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }
</script>

<script type=""text/javascript"">
    var crearTemp = document.getElementById(""btnCrearTemporada"");
    crearTemp.addEventListener(""click"", buttonCrearTemporada);

    function buttonCrearTemporada() {
        var nuevaTemporada = $('#nuevaTemporada').val();
        const temporada = {
            Temporada: nuevaTemporada
        };
        var urlToCall = '/MANAGERC/CrearTe");
            WriteLiteral(@"mporada';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            async: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al crear una temporada"");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });

    }
</script>

<script type=""text/javascript"">
    function buttonFinalizarCompeticionClicked(id) {
        const competicion = {
            Id: id
        };
        var urlToCall = '/MANAGERC/FinalizarCompeticion';
        //alert(urlToCall);
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(competicion),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
     ");
            WriteLiteral(@"       cache: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al finalizar la competición"");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }
</script>

<script type=""text/javascript"">
    var finTemp = document.getElementById(""button-finalizar-temporada"");
    finTemp.addEventListener(""click"", buttonFinalizarTemporada);

    function buttonFinalizarTemporada() {
        const temporada = {
            Id: ");
            EndContext();
            BeginContext(11644, 17, false);
#line 258 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
           Write(temporadaActualId);

#line default
#line hidden
            EndContext();
            BeginContext(11661, 910, true);
            WriteLiteral(@"
            };
        //alert(temporada.Id);
        var urlToCall = '/MANAGERC/FinalizarTemporada';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            async: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al finalizar la temporada"");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }
</script>

<script type=""text/javascript"">
    var limpiarBD = document.getElementById(""button-limpiar-basedatos"");
    limpiarBD.addEventListener(""click"", buttonLimpiarBD);

    function buttonLimpiarBD() {
        const temporada = {
            Id: ");
            EndContext();
            BeginContext(12572, 17, false);
#line 287 "D:\srcRepository\Proyectos Estela\Ligamania\LigamaniaCoreApp\Views\ManagerC\CierreTemporada.cshtml"
           Write(temporadaActualId);

#line default
#line hidden
            EndContext();
            BeginContext(12589, 1548, true);
            WriteLiteral(@"
        };
        //alert(temporada.Id);
        var urlToCall = '/MANAGERC/LimpiarBaseDatos';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(temporada),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            dataType: 'json',
            error: function (response) {
                alert(""Error al limpiar la base de datos"");
            }
        }).done(function (response) {
            alert(response.message);
            location.reload();
        });
    }

</script>

<script>
    $('#btnTemporadaActual').on('click', function (event) {
        var r = confirm(""¿Está seguro de querer que la pretemporada pase a ser la TEMPORADA ACTUAL?"");
        if (r == true) {
            var urlToCall = '/MANAGERC/PreTemporadaToActual';
            $.ajax({
                type: ""POST"",
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,");
            WriteLiteral(@"
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error crear temporada actual"" + competicion);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(response.message);
                }
            });
        }

    });
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<InfoPreparacionTemporadaViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591

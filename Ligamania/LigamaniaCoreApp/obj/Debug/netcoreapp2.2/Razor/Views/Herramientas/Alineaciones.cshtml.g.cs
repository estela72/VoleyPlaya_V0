#pragma checksum "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "34212fb6caed94881e23d75c3e3d9b864fab6596ab5877e8ecc9b954371573c6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Herramientas_Alineaciones), @"mvc.1.0.view", @"/Views/Herramientas/Alineaciones.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Herramientas/Alineaciones.cshtml", typeof(AspNetCore.Views_Herramientas_Alineaciones))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 3 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp;

#line default
#line hidden
#line 4 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models;

#line default
#line hidden
#line 5 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models.AccountViewModels;

#line default
#line hidden
#line 6 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models.ManageViewModels;

#line default
#line hidden
#line 7 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Data.DataModels.Base.Ligamania.Model;

#line default
#line hidden
#line 8 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Services;

#line default
#line hidden
#line 9 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Data;

#line default
#line hidden
#line 11 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using NonFactors.Mvc.Grid;

#line default
#line hidden
#line 2 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
using LigamaniaCoreApp.Models.HerramientasViewModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"34212fb6caed94881e23d75c3e3d9b864fab6596ab5877e8ecc9b954371573c6", @"/Views/Herramientas/Alineaciones.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA256", @"cc15118ad604b470ae866cea065e5e5dcaf3f56265436adea6abd4962110efbf", @"/Views/_ViewImports.cshtml")]
    public class Views_Herramientas_Alineaciones : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<AlineacionCompeticionViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(139, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 5 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
  
    ViewData["Title"] = "Herr: Alineaciones";
    var competiciones = await _ligamaniaService.GetCompeticionesActivas();
    var equipos = ViewBag.Equipos;

    var aliPreviasPorcategoria = new Dictionary<string, List<AlineacionCompeticionJornadaViewModel>>();
    var aliCambiosPorcategoria = new Dictionary<string, List<AlineacionCompeticionJornadaViewModel>>();
    var aliActualPorcategoria =  new Dictionary<string, List<AlineacionCompeticionJornadaViewModel>>();

    var listaCategorias = new List<string>();
    if (Model != null)
    {
        aliPreviasPorcategoria = Model.AlineacionesPrevias.GroupBy(ap => ap.OrdenCategoria+"-"+ap.Categoria )
            .ToDictionary(grp => grp.Key, grp => grp.ToList());
        aliCambiosPorcategoria = Model.AlineacionesCambios.GroupBy(ap => ap.OrdenCategoria+"-"+ap.Categoria).ToDictionary(grp => grp.Key, grp => grp.ToList());
        aliActualPorcategoria = Model.AlineacionesActual.GroupBy(ap => ap.OrdenCategoria+"-"+ap.Categoria).ToDictionary(grp => grp.Key, grp => grp.ToList());

        listaCategorias = Model.AlineacionesCambios.GroupBy(ap => ap.OrdenCategoria).Select(grp => grp.Key+"-"+ grp.FirstOrDefault().Categoria).ToList();
        listaCategorias = listaCategorias.OrderBy(c => c).ToList();
    }

#line default
#line hidden
            BeginContext(1433, 822, true);
            WriteLiteral(@"<div class=""flex-container"">
    <div class=""card"">
        <div class=""card-header"">
            <div class=""d-flex flex-row border-dark"">
                <div class=""p-2 "">
                    <h3>Revisar que todos los jugadores alineados tengan el club correcto</h3>
                    <button class=""btn btn-primary"" id=""revisarClub"">Revisar Clubs</button>
                </div>
            </div>
        </div>
    </div>
    <div class=""card"">
        <div class=""card-header"">
            <div class=""d-flex flex-row border-dark"">
                <h3>Seleccionar competición para ver todas las alineaciones en la jornada previa y en la jornada en curso</h3>
                <div class=""p-2 "">
                    <label for=""competicion-name"">Seleccionar Competición</label>
                    ");
            EndContext();
            BeginContext(2256, 167, false);
#line 43 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
               Write(Html.DropDownList("competicion", competiciones, "Seleccionar...", new { @class = "custom-select", required = "required", @onchange = "CompeticionChange(this.value)" }));

#line default
#line hidden
            EndContext();
            BeginContext(2423, 95, true);
            WriteLiteral("\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n");
            EndContext();
#line 48 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
             if (Model != null)
            {

#line default
#line hidden
            BeginContext(2566, 56, true);
            WriteLiteral("                <div class=\"card-title\">Alineaciones de ");
            EndContext();
            BeginContext(2623, 17, false);
#line 50 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                                                   Write(Model.Competicion);

#line default
#line hidden
            EndContext();
            BeginContext(2640, 8, true);
            WriteLiteral("</div>\r\n");
            EndContext();
#line 51 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                var competicion = Model.Competicion;
                foreach (var categoria in listaCategorias)
                {
                    if (aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && aliActualPorcategoria.ContainsKey(categoria))
                    {
                        

#line default
#line hidden
            BeginContext(2998, 345, false);
#line 56 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                   Write(await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",aliPreviasPorcategoria[categoria]}, {"cambios",aliCambiosPorcategoria[categoria]},
                            {"actual",aliActualPorcategoria[categoria]} }));

#line default
#line hidden
            EndContext();
#line 58 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                                                                          
                    }
                    else if (aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && !aliActualPorcategoria.ContainsKey(categoria))
                    {
                        

#line default
#line hidden
            BeginContext(3591, 317, false);
#line 62 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                   Write(await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",aliPreviasPorcategoria[categoria]}, {"cambios",aliCambiosPorcategoria[categoria]},
                            {"actual",null} }));

#line default
#line hidden
            EndContext();
#line 64 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                                              
                    }
                    else if (!aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && !aliActualPorcategoria.ContainsKey(categoria))
                    {
                        

#line default
#line hidden
            BeginContext(4157, 258, false);
#line 68 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                   Write(await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",null}, {"cambios",aliCambiosPorcategoria[categoria]},{"actual",null} }));

#line default
#line hidden
            EndContext();
#line 69 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                                                                                                                                                                    
                    }
                    else if (!aliPreviasPorcategoria.ContainsKey(categoria) && aliCambiosPorcategoria.ContainsKey(categoria) && aliActualPorcategoria.ContainsKey(categoria))
                    {
                        

#line default
#line hidden
            BeginContext(4663, 286, false);
#line 73 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                   Write(await Html.PartialAsync("_alineacionesCategoria", viewData: new ViewDataDictionary(ViewData)
                           {{"competicion",competicion},{"categoria",categoria }, {"previas",null}, {"cambios",aliCambiosPorcategoria[categoria]},{"actual",aliActualPorcategoria[categoria]} }));

#line default
#line hidden
            EndContext();
#line 74 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\Herramientas\Alineaciones.cshtml"
                                                                                                                                                                                                
                    }
                }
            }

#line default
#line hidden
            BeginContext(5008, 2029, true);
            WriteLiteral(@"        </div>
    </div>
</div>

<script type=""text/javascript"">
    $('#revisarClub').on('click', function (event) {
        var r = confirm(""Se van a comparar los clubs de los jugadores alineados con los clubs de los jugadores activos. ¿Continuar?"");
        if (r == true) {
            var urlToCall = '/Herramientas/RevisarClubAlineaciones';
            $.ajax({
                type: ""POST"",
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function () {
                    alert(""Error al revisar clubs"" + categoria);
                }
            }).done(function (response) {
                if (response.result) {
                    alert(response.message);
                    location.reload();
                }
                else {
                    alert(response.message);
                }
            })");
            WriteLiteral(@";
        }
    });
    function CompeticionChange(competicion) {
        var r = true;
        if (r == true) {
            var urlToCall = '/Herramientas/Alineaciones?competicion=' + competicion;
            window.location.href = urlToCall;
            //$.ajax({
            //    type: ""POST"",
            //    url: urlToCall,
            //    contentType: ""application/json; charset=utf-8"",
            //    processData: true,
            //    cache: false,
            //    dataType: 'json',
            //    error: function () {
            //        alert(""Error al cargar alineaciones de "" + competicion);
            //    }
            //}).done(function (response) {
            //    if (response.result) {
            //        alert(response.message);
            //        location.reload();
            //    }
            //    else {
            //        alert(response.message);
            //    }   
            //});
        }
    };

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public ILigamaniaService _ligamaniaService { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<AlineacionCompeticionViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591

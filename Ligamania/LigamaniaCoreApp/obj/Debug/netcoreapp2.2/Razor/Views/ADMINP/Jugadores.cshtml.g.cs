#pragma checksum "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c1766e18d9cd118db5a0b85d6e79e2b8bfb1e600"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ADMINP_Jugadores), @"mvc.1.0.view", @"/Views/ADMINP/Jugadores.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/ADMINP/Jugadores.cshtml", typeof(AspNetCore.Views_ADMINP_Jugadores))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 3 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp;

#line default
#line hidden
#line 4 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models;

#line default
#line hidden
#line 5 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models.AccountViewModels;

#line default
#line hidden
#line 6 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Models.ManageViewModels;

#line default
#line hidden
#line 7 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Data.DataModels.Base.Ligamania.Model;

#line default
#line hidden
#line 8 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Services;

#line default
#line hidden
#line 9 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using LigamaniaCoreApp.Data;

#line default
#line hidden
#line 11 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\_ViewImports.cshtml"
using NonFactors.Mvc.Grid;

#line default
#line hidden
#line 2 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
using LigamaniaCoreApp.Models.ManagerViewModels;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c1766e18d9cd118db5a0b85d6e79e2b8bfb1e600", @"/Views/ADMINP/Jugadores.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1653bea22581b35930f70d9de4acba1f76fe3e61", @"/Views/_ViewImports.cshtml")]
    public class Views_ADMINP_Jugadores : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<InfoPreparacionTemporadaViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "CargarJugadores", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "AdminP", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("enctype", new global::Microsoft.AspNetCore.Html.HtmlString("multipart/form-data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("editJugador"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("needs-validation"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString("#"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("activeJugador"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("createJugador"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("editTemporadaJugador"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(121, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(165, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 6 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
  
    ViewData["Title"] = "Jugadores";
    var clubs = await ligamaniaService.GetAllClubs(activo: true);
    var puestos = await ligamaniaService.GetAllPuestos();
    var jugadores = Model.Jugadores;

#line default
#line hidden
            BeginContext(376, 227, true);
            WriteLiteral("\r\n<h2>Alta y Baja de Jugadores para la temporada</h2>\r\n<div class=\"flex-container\">\r\n    <div class=\"flex-item-bold-center col-12\">\r\n        <div class=\"card col-12 border-primary mt-2\">\r\n            <div class=\"card-header\">\r\n");
            EndContext();
#line 18 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                 if (ViewBag.ActivarMensaje != null && ViewBag.ActivarMensaje && ViewBag.Message!=null)
                {

#line default
#line hidden
            BeginContext(727, 62, true);
            WriteLiteral("                    <ul class=\"list-group list-group-flush\">\r\n");
            EndContext();
#line 21 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                         foreach(var msg in ViewBag.Message)
                        {

#line default
#line hidden
            BeginContext(878, 74, true);
            WriteLiteral("                            <li class=\"list-group-item\" style=\"color:red\">");
            EndContext();
            BeginContext(953, 3, false);
#line 23 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                                                                     Write(msg);

#line default
#line hidden
            EndContext();
            BeginContext(956, 7, true);
            WriteLiteral("</li>\r\n");
            EndContext();
#line 24 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                        }

#line default
#line hidden
            BeginContext(990, 27, true);
            WriteLiteral("                    </ul>\r\n");
            EndContext();
#line 26 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                }

#line default
#line hidden
            BeginContext(1036, 30, true);
            WriteLiteral("                <h3>TEMPORADA ");
            EndContext();
            BeginContext(1067, 17, false);
#line 27 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                         Write(ViewBag.Temporada);

#line default
#line hidden
            EndContext();
            BeginContext(1084, 916, true);
            WriteLiteral(@" - Actualizar lista de jugadores desde Excel</h3>
                <ul class=""list-group list-group-flush"">
                    <li class=""list-group-item""> 1º) Exportar a excel los jugadores activos en la última temporada que se jugó (o la actual)</li>
                    <li class=""list-group-item""> 2º) Desactivar todos los jugadores - Con esta acción no dejaremos ningún jugador activo en ninguna temporada</li>
                    <li class=""list-group-item""> 3º) Modificar la excel dejando en cada Club los jugadores activos</li>
                    <li class=""list-group-item""> 4º) Cargar la excel con los jugadores. Quedarán activos para la temporada actual o pretemporada.</li>
                </ul>
                <hr />
                <div class=""btn-group mx-auto p-5"" role=""group"" aria-label=""Toolbar with button groups"">
                    <button type=""button"" class=""btn btn-primary mr-3""");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 2000, "\"", 2064, 3);
            WriteAttributeValue("", 2010, "location.href=\'", 2010, 15, true);
#line 36 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
WriteAttributeValue("", 2025, Url.Action("ExportarExcel", "AdminP"), 2025, 38, false);

#line default
#line hidden
            WriteAttributeValue("", 2063, "\'", 2063, 1, true);
            EndWriteAttribute();
            BeginContext(2065, 98, true);
            WriteLiteral(">Exportar a Excel</button>\r\n                    <button type=\"button\" class=\"btn btn-primary mr-3\"");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 2163, "\"", 2238, 3);
            WriteAttributeValue("", 2173, "location.href=\'", 2173, 15, true);
#line 37 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
WriteAttributeValue("", 2188, Url.Action("DesactivarTodosJugadores", "AdminP"), 2188, 49, false);

#line default
#line hidden
            WriteAttributeValue("", 2237, "\'", 2237, 1, true);
            EndWriteAttribute();
            BeginContext(2239, 99, true);
            WriteLiteral(">Desactivar todos los jugadores</button>\r\n                    <fieldset style=\"margin-top: 15px\">\r\n");
            EndContext();
            BeginContext(2413, 24, true);
            WriteLiteral("                        ");
            EndContext();
            BeginContext(2437, 415, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c1766e18d9cd118db5a0b85d6e79e2b8bfb1e60013618", async() => {
                BeginContext(2633, 212, true);
                WriteLiteral("\r\n                            <input type=\"file\" name=\"file\" />\r\n                            <input type=\"submit\" class=\"btn btn-primary mr-3\" value=\"Actualizar jugadores desde Excel\" />\r\n                        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2852, 224, true);
            WriteLiteral("\r\n                    </fieldset>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"flex-container\">\r\n    <div class=\"flex-item-bold-center card\">\r\n        <div class=\"card-body\">\r\n");
            EndContext();
#line 56 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
             if (Model.Pretemporada != null)
            {

#line default
#line hidden
            BeginContext(3137, 50, true);
            WriteLiteral("                <h5 class=\"card-title\">Jugadores (");
            EndContext();
            BeginContext(3188, 28, false);
#line 58 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                                             Write(Model.Pretemporada.Temporada);

#line default
#line hidden
            EndContext();
            BeginContext(3216, 594, true);
            WriteLiteral(@")</h5>
                <h6>Se puede filtrar por Jugador, Club y Puesto pinchando en la cabecera de cada columna</h6>
                <h6>Con el botón 'Editar' se puede modificar el Club y/o Puesto de cada jugador. El puesto de un jugador sólo se podrá modificar antes de comenzar la temporada</h6>
                <h6>Con el botón 'Borrar' se elimina el registro. Con el botón 'Desactivar' se desactiva el jugador para la temporada</h6>
                <div id=""grid-pretemporadajugadores"" class=""mvc-grid"" data-name="""" data-filter-mode=""FilterRow"" data-source-url="""">
                    ");
            EndContext();
            BeginContext(3811, 112, false);
#line 63 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
               Write(Html.AjaxGrid(Url.Action("PretemporadaJugadoresGrid", "AdminP"), new { id = "ajax-grid-pretemporadajugadores" }));

#line default
#line hidden
            EndContext();
            BeginContext(3923, 26, true);
            WriteLiteral("\r\n                </div>\r\n");
            EndContext();
#line 65 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
            }

#line default
#line hidden
            BeginContext(3964, 1499, true);
            WriteLiteral(@"        </div>
    </div>
    <div class=""flex-item-bold-center card"">
        <div class=""card-header"">
            <h6>El botón 'Nuevo jugador' añade un jugador a la tabla general, así como a la pretemporada o temporada actual</h6>
            <h6>Si el nombre del jugador introducido, existe, y el jugador está inactivo, se preguntará si se quiere activar para la temporada, en el club y puesto seleccionado.</h6>
            <h6>Si el nombre del jugador introducido, no existe, el jugador se agregará al inventario y a la temporada, con el club y puesto seleccionados.</h6>
            <button type=""button"" class='btn btn-primary btn-lg' data-toggle='modal' data-target='#addJugadorModal'>Nuevo jugador</button>
            <button type=""button"" class=""btn btn-primary btn-lg"" onclick=""copiarAPretemporada();"">Copiar los jugadores de la última temporada. Sólo los clubs activos</button>
        </div>
        <div class=""card-body"">
            <h5 class=""card-title"">Inventario completo de Jugadores</h5>
");
            WriteLiteral(@"            <h6>Se muestra el listado completo de Jugadores, tanto activos como inactivos, de todas las temporadas</h6>
            <h6>Con el botón 'Editar' se puede modificar el nombre de un jugador</h6>
            <h6>Con el botón 'Borrar' se elimina el registro. Con el botón 'Desactivar' se pone el jugador en estado 'Inactivo'</h6>
            <div id=""grid-jugadores"" class=""mvc-grid"" data-name="""" data-filter-mode=""FilterRow"" data-source-url="""">
                ");
            EndContext();
            BeginContext(5464, 88, false);
#line 82 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
           Write(Html.AjaxGrid(Url.Action("JugadoresGrid", "AdminP"), new { id = "ajax-grid-jugadores" }));

#line default
#line hidden
            EndContext();
            BeginContext(5552, 665, true);
            WriteLiteral(@"
            </div>
        </div>
    </div>
</div>



<div class=""modal fade"" id=""editJugadorModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""editJugadorModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""editJugadorModalLabel"">Editando...</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(6217, 847, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c1766e18d9cd118db5a0b85d6e79e2b8bfb1e60020969", async() => {
                BeginContext(6287, 770, true);
                WriteLiteral(@"
                    <input type=""hidden"" class=""form-control"" id=""id-jugador"">
                    <div class=""form-group"">
                        <label for=""edit-jugador-nombre"">Nombre del Jugador:</label>
                        <input type=""text"" class=""form-control"" id=""edit-jugador-nombre"" aria-describedby=""jugadorHelp"" placeholder=""Nombre del jugador"" required>
                        <div class=""invalid-feedback"" id=""message-nombre-jugador"">
                            Por favor, escribir un nombre de un jugador que no exista
                        </div>
                        <small id=""jugadorHelp"" class=""form-text text-muted"">Se debe introducir un nombre de jugador que aún no exista.</small>
                    </div>
                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("novalidate", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(7064, 933, true);
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"" data-save=""modal-edit"">Guardar</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<div class=""modal fade"" id=""activeJugadorModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""activeJugadorModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""activeJugadorModalLabel"">Activando...</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(7997, 1691, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c1766e18d9cd118db5a0b85d6e79e2b8bfb1e60024761", async() => {
                BeginContext(8069, 658, true);
                WriteLiteral(@"
                    <input type=""hidden"" class=""form-control"" id=""id-jugadorActive"">
                    <div class=""form-group"">
                        <label for=""edit-jugador-nombre"">Nombre del Jugador:</label>
                        <input type=""text"" class=""form-control"" id=""active-jugador-nombre"" aria-describedby=""jugadorHelp"" placeholder=""Nombre del jugador"" disabled>
                        <div class=""input-group mb-3"">
                            <div class=""input-group-prepend"">
                                <label class=""input-group-text"" for=""club"">Club</label>
                            </div>
                            ");
                EndContext();
                BeginContext(8728, 113, false);
#line 139 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                       Write(Html.DropDownList("clubActive", clubs, "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(8841, 470, true);
                WriteLiteral(@"
                            <div class=""invalid-feedback"">
                                Por favor, seleccionar un club
                            </div>
                        </div>
                        <div class=""input-group mb-3"">
                            <div class=""input-group-prepend"">
                                <label class=""input-group-text"" for=""puesto"">Puesto</label>
                            </div>
                            ");
                EndContext();
                BeginContext(9312, 117, false);
#line 148 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                       Write(Html.DropDownList("puestoActive", puestos, "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(9429, 252, true);
                WriteLiteral("\r\n                            <div class=\"invalid-feedback\">\r\n                                Por favor, seleccionar el puesto del jugador\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("novalidate", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(9688, 942, true);
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"" data-save=""modal-edit"">Guardar</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<div class=""modal fade"" id=""addJugadorModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""addJugadorModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""addJugadorModalLabel"">Nuevo jugador en la temporada </h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(10630, 1915, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c1766e18d9cd118db5a0b85d6e79e2b8bfb1e60030150", async() => {
                BeginContext(10702, 974, true);
                WriteLiteral(@"
                    <div class=""form-group"">
                        <label for=""add-jugador-nombre"">Nombre del Jugador:</label>
                        <input type=""text"" class=""form-control"" id=""add-jugador-nombre"" aria-describedby=""jugadorHelp"" placeholder=""Nombre del jugador"" required>
                        <div class=""invalid-feedback"" id=""message-nombre-jugador"">
                            Por favor, escribir un nombre de un jugador que no exista o bien que esté inactivo
                        </div>
                        <small id=""jugadorHelp"" class=""form-text text-muted"">Se debe introducir un nombre de jugador que aún no exista o bien que esté inactivo.</small>
                    </div>
                    <div class=""input-group mb-3"">
                        <div class=""input-group-prepend"">
                            <label class=""input-group-text"" for=""club"">Club</label>
                        </div>
                        ");
                EndContext();
                BeginContext(11677, 107, false);
#line 187 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                   Write(Html.DropDownList("club", clubs, "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(11784, 434, true);
                WriteLiteral(@"
                        <div class=""invalid-feedback"">
                            Por favor, seleccionar un club
                        </div>
                    </div>
                    <div class=""input-group mb-3"">
                        <div class=""input-group-prepend"">
                            <label class=""input-group-text"" for=""puesto"">Puesto</label>
                        </div>
                        ");
                EndContext();
                BeginContext(12219, 111, false);
#line 196 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                   Write(Html.DropDownList("puesto", puestos, "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(12330, 208, true);
                WriteLiteral("\r\n                        <div class=\"invalid-feedback\">\r\n                            Por favor, seleccionar el puesto del jugador\r\n                        </div>\r\n                    </div>\r\n                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("novalidate", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12545, 952, true);
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"" data-save=""modal-add"">Guardar</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<div class=""modal fade"" id=""editTemporadaJugadorModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""editTemporadaJugadorModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""editTemporadaJugadorModalLabel"">Editando...</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
            EndContext();
            BeginContext(13497, 1587, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c1766e18d9cd118db5a0b85d6e79e2b8bfb1e60035771", async() => {
                BeginContext(13576, 621, true);
                WriteLiteral(@"
                    <input type=""hidden"" class=""form-control"" id=""id-temporadajugador"">
                    <div class=""form-group"">
                        <label for=""edit-Temporadajugador-nombre"">Nombre del Jugador:</label>
                        <input type=""text"" class=""form-control"" id=""edit-temporadajugador-nombre"" readonly>
                    </div>
                    <div class=""input-group mb-3"">
                        <div class=""input-group-prepend"">
                            <label class=""input-group-text"" for=""club"">Club</label>
                        </div>
                        ");
                EndContext();
                BeginContext(14198, 116, false);
#line 231 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                   Write(Html.DropDownList("temporadaclub", clubs, "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(14314, 434, true);
                WriteLiteral(@"
                        <div class=""invalid-feedback"">
                            Por favor, seleccionar un club
                        </div>
                    </div>
                    <div class=""input-group mb-3"">
                        <div class=""input-group-prepend"">
                            <label class=""input-group-text"" for=""puesto"">Puesto</label>
                        </div>
                        ");
                EndContext();
                BeginContext(14749, 120, false);
#line 240 "D:\srcRepository\ProyectosEstela\Ligamania\LigamaniaCoreApp\Views\ADMINP\Jugadores.cshtml"
                   Write(Html.DropDownList("temporadapuesto", puestos, "Seleccionar...", new { @class = "custom-select", required = "required" }));

#line default
#line hidden
                EndContext();
                BeginContext(14869, 208, true);
                WriteLiteral("\r\n                        <div class=\"invalid-feedback\">\r\n                            Por favor, seleccionar el puesto del jugador\r\n                        </div>\r\n                    </div>\r\n                ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("novalidate", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(15084, 17537, true);
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"" data-save=""modal-edit"">Guardar</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script type=""text/javascript"">
    function copiarAPretemporada() {
        var urlToCall = '/ADMINP/CopiarJugadoresAPretemporada';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            success: function (response) {
                alert(""Jugadores copiados a la pretemporada"");
                reloadPage();
            },
            error: function (response) {
                alert(""Error al copiar jugadores"");
            }
        })
    }
    function checkJugador(validarClubPuesto, jug");
            WriteLiteral(@"ador, club, puesto, callback) {
        var validado = true;
        if (validarClubPuesto) {
            if (club === '') {
                alert('Debe seleccionar un club');
                validado = false;
            }
            if (puesto === '') {
                alert('Debe seleccionar un puesto');
                validado = false;
            }
        }
        var respuesta = -2;
        if (validado) {
            $.ajax({
                type: ""POST"",
                url: ""/ADMINP/CheckNombreJugador"",
                data: JSON.stringify(jugador),
                contentType: ""application/json; charset=utf-8"",
                dataType: ""json"",
                processData: true,
                cache: false,
                success: function (response) {
                    respuesta = response;
                },
                error: function (response) {
                    respuesta = -1;
                }
            }).done(function (data) {
                ca");
            WriteLiteral(@"llback(data);
            });
        }
        return respuesta;
    }
    function crearJugador(jugador, club, puesto, callback) {
        //var jugador = $('#add-jugador-nombre').val();
        //var club = $('#club').val();
        //var puesto = $('#puesto').val();

        const jugadorVM = {
            Id: 0,
            Jugador: jugador,
            Club: club,
            Puesto: puesto
        };
        var urlToCall = '/ADMINP/NuevoJugador';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(jugadorVM),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            success: function (partialViewData) {
                //alert(""Jugador añadido"");
            },
            error: function (response) {
                alert(""Error al crear un nuevo jugador"");
            }
        }).done(function (data) {
            callback(data);
        });
   ");
            WriteLiteral(@" }
    function editJugador(id, jugador, callback) {
        const jugadorVM = {
            IdJugador: id,
            Jugador: jugador,
            Club: null,
            Puesto: null
        };
        //alert(jugadorVM.Id + ""-"" + jugadorVM.Jugador);
        var urlToCall = '/ADMINP/EditJugador';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(jugadorVM),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            error: function (response) {
                alert(""Error al editar un jugador"");
            }
        }).done(function (data) {
            callback(data);
        });
    }
    function editTemporadaJugador(id, jugador, club, puesto, callback) {
        const jugadorVM = {
            IdTemporadaJugador: id,
            Jugador: jugador,
            Club: club,
            Puesto: puesto
        };
        var urlToCall = '/ADMINP/EditTemp");
            WriteLiteral(@"oradaJugador';
        $.ajax({
            type: ""POST"",
            data: JSON.stringify(jugadorVM),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al editar un jugador"");
            }
        }).done(function (data) {
            callback(data);
        });
    }
</script>

<script type=""text/javascript"">
    $(function () {
        $('#addJugadorModal').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
    });
    $('#addJugadorModal').on('click', '[data-save=""modal-add""]', function (event) {
        var jugador = $('#add-jugador-nombre').val();
        var club = $('#club').val();
        var puesto = $('#puesto').val();
        var form = $('#createJugador');
        $(""#add-jugador-nombre"")[0].setCustomValidity("""");
        checkJugador");
            WriteLiteral(@"(true, jugador, club, puesto, function (jugadorChecked) {
            if (jugadorChecked === 2) {   // no existe el jugador
                alert('El jugador no existe. Lo creamos en la temporada con el club y puesto indicados');
                crearJugador(jugador, club, puesto, function (jugadorCreado) {
                    alert(jugadorCreado.message);
                    $('#addJugadorModal').modal('hide');
                    reloadPage();
                });
            }
            else if (jugadorChecked === 1)    // existe y está inactivo
            {
                var r = confirm(""El jugador existe y está inactivo. ¿Activar para la temporada en el club y puesto indicados?"");
                if (r == true) {
                    crearJugador(jugador, club, puesto, function (jugadorCreado) {
                        alert(jugadorCreado.message);
                        $('#addJugadorModal').modal('hide');
                        reloadPage();
                    });
              ");
            WriteLiteral(@"  }
            }
            else if (jugadorChecked === 0) {
                var r = confirm('El jugador existe y está activo. ¿Cambiar para el club y puesto indicados?');
                if (r == true) {
                    crearJugador(jugador, club, puesto, function (jugadorCreado) {
                        alert(jugadorCreado.message);
                        $('#addJugadorModal').modal('hide');
                        reloadPage();
                    });
                }
                else {
                    $(""#add-jugador-nombre"")[0].setCustomValidity(""Ya existe un jugador con este nombre y está Activo"");
                    $('#add-jugador-nombre')[0].reportValidity();
                }
            }
            else {
                alert('Error al chequear existencia del jugador ' + jugador);
            }
        })
    });
    $('#editJugadorModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal");
            WriteLiteral(@"
        var id = button.data('id') // Extract info from data-* attributes
        var jugador = button.data('jugador')
        var activo = button.data('activo')
        //alert(id + "" "" + jugador + "" "" + activo);
        // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
        var modal = $(this)
        modal.find('.modal-title').text('Edición del jugador ' + jugador)
        modal.find('#id-jugador').val(id)
        modal.find('#edit-jugador-nombre').val(jugador)
        //modal.find('#message-text').val(noticia)
    });
    $('#editJugadorModal').on('click', '[data-save=""modal-edit""]', function (event) {
        var id = $('#id-jugador').val();
        var jugador = $('#edit-jugador-nombre').val();

        var form = $('#editJugador');
        $(""#edit-jugador-nombre"")[0].setCustomValidity("""");
        checkJu");
            WriteLiteral(@"gador(false, jugador, """", """", function (jugadorChecked) {
            if (jugadorChecked === 2)    // no existe
            {
                editJugador(id, jugador, function (jugadorModificado) {
                    alert(jugadorModificado.message);
                    $('#editJugadorModal').modal('hide');
                    reloadPage();
                });
            }
            else {
                alert('Ya existe el jugador ' + jugador);
            }
        })
    });
    $('#activeJugadorModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal
        var id = button.data('id') // Extract info from data-* attributes
        var jugador = button.data('jugador')
        alert(id + "" "" + jugador);
        // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or ot");
            WriteLiteral(@"her methods instead.
        var modal = $(this)
        modal.find('.modal-title').text('Activación del jugador ' + jugador)
        modal.find('#id-jugadorActive').val(id)
        modal.find('#active-jugador-nombre').val(jugador)
    });
    $('#activeJugadorModal').on('click', '[data-save=""modal-edit""]', function (event) {
        var id = $('#id-jugadorActive').val();
        var jugador = $('#active-jugador-nombre').val();
        var club = $('#clubActive').val();
        var puesto = $('#puestoActive').val();

        var validado = true;
        if (club === '') {
            alert('Debe seleccionar un club');
            validado = false;
        }
        if (puesto === '') {
            alert('Debe seleccionar un puesto');
            validado = false;
        }
        if (validado) {
            crearJugador(jugador, club, puesto, function (jugadorModificado) {
                alert(jugadorModificado.message);
                if (jugadorModificado.result) {
              ");
            WriteLiteral(@"      $('#activeTemporadaJugadorModal').modal('hide');
                    reloadPage();
                }
            });
        }
    });

    $('#editTemporadaJugadorModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget) // Button that triggered the modal
        var id = button.data('id') // Extract info from data-* attributes
        var jugador = button.data('jugador')
        var activo = button.data('activo')
        var club = button.data('club')
        var puesto = button.data('puesto')
        // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
        var modal = $(this)
        modal.find('.modal-title').text('Edición del jugador ' + jugador)
        modal.find('#id-temporadajugador').val(id)
        modal.find('#edit-temporadajugador-nombre').val(jugador)
        modal.find('#temporadaclub').val(club);
        modal.find('#temporadapuesto').val(puesto);
    });
    $('");
            WriteLiteral(@"#editTemporadaJugadorModal').on('click', '[data-save=""modal-edit""]', function (event) {
        var id = $('#id-temporadajugador').val();
        var jugador = $('#edit-temporadajugador-nombre').val();
        var club = $('#temporadaclub').val();
        var puesto = $('#temporadapuesto').val();

        var validado = true;
        if (club === '') {
            alert('Debe seleccionar un club');
            validado = false;
        }
        if (puesto === '') {
            alert('Debe seleccionar un puesto');
            validado = false;
        }
        var form = $('#editTemporadaJugador');
        if (validado) {
            editTemporadaJugador(id, jugador, club, puesto, function (jugadorModificado) {
                alert(jugadorModificado.message);
                if (jugadorModificado.result) {
                    $('#editTemporadaJugadorModal').modal('hide');
                    reloadPage();
                }
            });
        }
    });

    function reloadPage");
            WriteLiteral(@"() {
        var urlToCall = '/ADMINP/Jugadores';
        $.ajax({
            type: ""GET"",
            data: JSON.stringify(jugador),
            url: urlToCall,
            contentType: ""application/json; charset=utf-8"",
            processData: true,
            cache: false,
            dataType: 'json',
            error: function (response) {
                alert(""Error al cargar Jugadores"");
            }
        });
    };
</script>

<script type=""text/javascript"">
    function buttonBorrarJugador(elementid) {
        const jugador = {
            IdJugador: elementid
        };
        var r = confirm(""¿Está seguro de querer eliminar definitivamente el jugador?"");
        if (r == true) {
            var urlToCall = '/ADMINP/BorrarJugador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(jugador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
   ");
            WriteLiteral(@"             cache: false,
                dataType: 'json',
                error: function (response) {
                    alert(""Error al borrar un jugador"");
                }
            }).done(function (response) {
                alert(response.message);
                reloadPage();
            });
        }
    }
    function buttonDesactivarJugador(elementid) {
        const jugador = {
            IdJugador: elementid
        };
        var r = confirm(""¿Está seguro de querer desactivar el jugador?"");
        if (r == true) {
            var urlToCall = '/ADMINP/DesactivarJugador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(jugador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                sucess: function (response) {
                    alert(response.message);
          ");
            WriteLiteral(@"          reloadPage();
                },
                error: function (response) {
                    alert(""Error al dar de baja un jugador"");
                }
            });
        }
    }
    function buttonBorrarTemporadaJugador(elementid) {
        const jugador = {
            IdTemporadaJugador: elementid
        };
        var r = confirm(""¿Está seguro de querer eliminar definitivamente el jugador?"");
        if (r == true) {
            var urlToCall = '/ADMINP/BorrarTemporadaJugador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(jugador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function (response) {
                    alert(""Error al borrar un jugador"");
                }
            }).done(function (response) {
                alert(response.me");
            WriteLiteral(@"ssage);
                reloadPage();
            });
        }
    }
    function buttonDesactivarTemporadaJugador(elementid) {
        const jugador = {
            IdTemporadaJugador: elementid
        };
        var r = confirm(""¿Está seguro de querer desactivar el jugador?"");
        if (r == true) {
            var urlToCall = '/ADMINP/DesactivarTemporadaJugador';
            $.ajax({
                type: ""POST"",
                data: JSON.stringify(jugador),
                url: urlToCall,
                contentType: ""application/json; charset=utf-8"",
                processData: true,
                cache: false,
                dataType: 'json',
                error: function (response) {
                    alert(""Error al dar de baja un jugador"");
                }
            }).done(function (response) {
                alert(response.message);
                reloadPage();
            });
        }
    }
</script>

<script>
    // Example starter JavaScript fo");
            WriteLiteral(@"r disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');

            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });

        }, false);
    })();
</script>
<style>
    /* .invalid class prevents CSS from automatically applying */
    .invalid input:required:invalid {
        background: #BE4C54;
    }

    /* Mar");
            WriteLiteral("k valid inputs during .invalid state */\r\n    .invalid input:required:valid {\r\n        background: #17D654;\r\n    }\r\n</style>\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public LigamaniaCoreApp.Services.ILigamaniaService ligamaniaService { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<InfoPreparacionTemporadaViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
